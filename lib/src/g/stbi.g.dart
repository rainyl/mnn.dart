// Copyright (c) 2025, rainyl.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:mnn/stbi.dart')
library;

import 'dart:ffi' as ffi;
import '' as self;

@ffi.Array.multi([9])
@ffi.Native<ffi.Array<ffi.Int>>()
external ffi.Array<ffi.Int> STBIR_mask;

@ffi.Array.multi([5])
@ffi.Native<ffi.Array<stbi_uc>>()
external ffi.Array<stbi_uc> first_row_filter;

/// From https://gist.github.com/rygorous/2203834
@ffi.Array.multi([104])
@ffi.Native<ffi.Array<stbir_uint32>>()
external ffi.Array<stbir_uint32> fp32_to_srgb8_tab4;

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(ffi.Pointer<stbi__jpeg>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Int)>()
external ffi.Pointer<stbi_uc> load_jpeg_image(
  ffi.Pointer<stbi__jpeg> z,
  ffi.Pointer<ffi.Int> out_x,
  ffi.Pointer<ffi.Int> out_y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Float>)>()
external int mnn_stbi_add_f32(
  ffi.Pointer<stbi_uc> data,
  int width,
  int height,
  int channels,
  ffi.Pointer<ffi.Float> value,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Float>)>()
external int mnn_stbi_div_f32(
  ffi.Pointer<stbi_uc> data,
  int width,
  int height,
  int channels,
  ffi.Pointer<ffi.Float> value,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Float>)>()
external int mnn_stbi_mul_f32(
  ffi.Pointer<stbi_uc> data,
  int width,
  int height,
  int channels,
  ffi.Pointer<ffi.Float> value,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int, ffi.Int)>()
external int mnn_stbi_rgb_flatten_uint8(
  ffi.Pointer<stbi_uc> data,
  int width,
  int height,
  int channels,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Float>)>()
external int mnn_stbi_sub_f32(
  ffi.Pointer<stbi_uc> data,
  int width,
  int height,
  int channels,
  ffi.Pointer<ffi.Float> value,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(ffi.Pointer<stbi_uc>, ffi.Pointer<stbi_uc>,
        ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int)>()
external ffi.Pointer<stbi_uc> resample_row_1(
  ffi.Pointer<stbi_uc> out,
  ffi.Pointer<stbi_uc> in_near,
  ffi.Pointer<stbi_uc> in_far,
  int w,
  int hs,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbi_uc>, ffi.Pointer<stbi_uc>,
        ffi.Pointer<stbi_uc>, ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int)>()
external void stbi__YCbCr_to_RGB_row(
  ffi.Pointer<stbi_uc> out,
  ffi.Pointer<stbi_uc> y,
  ffi.Pointer<stbi_uc> pcb,
  ffi.Pointer<stbi_uc> pcr,
  int count,
  int step,
);

/// returns 1 if the sum of two signed ints is valid (between -2^31 and 2^31-1 inclusive), 0 on overflow.
@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>()
external int stbi__addints_valid(
  int a,
  int b,
);

/// return 1 if the sum is valid, 0 on overflow.
/// negative terms are considered invalid.
@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>()
external int stbi__addsizes_valid(
  int a,
  int b,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__at_eof(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>()
external int stbi__bit_reverse(
  int v,
  int bits,
);

@ffi.Native<ffi.Int Function(ffi.UnsignedInt)>()
external int stbi__bitcount(
  int a,
);

@ffi.Native<ffi.Int Function(ffi.Int)>()
external int stbi__bitreverse16(
  int n,
);

/// fast 0..255 * 0..255 => 0..255 rounded multiplication
@ffi.Native<stbi_uc Function(stbi_uc, stbi_uc)>()
external int stbi__blinn_8x8(
  int x,
  int y,
);

/// (1 << n) - 1
@ffi.Array.multi([17])
@ffi.Native<ffi.Array<stbi__uint32>>()
external ffi.Array<stbi__uint32> stbi__bmask;

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__bmp_info(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi__result_info>)>()
external ffi.Pointer<ffi.Void> stbi__bmp_load(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
  ffi.Pointer<stbi__result_info> ri,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__context>, ffi.Pointer<stbi__bmp_data>)>()
external ffi.Pointer<ffi.Void> stbi__bmp_parse_header(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<stbi__bmp_data> info,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__bmp_data>, ffi.Int)>()
external int stbi__bmp_set_mask_defaults(
  ffi.Pointer<stbi__bmp_data> info,
  int compress,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__bmp_test(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__bmp_test_raw(
  ffi.Pointer<stbi__context> s,
);

/// build a table that decodes both magnitude and value of small ACs in
/// one go.
@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbi__int16>, ffi.Pointer<stbi__huffman>)>()
external void stbi__build_fast_ac(
  ffi.Pointer<stbi__int16> fast_ac,
  ffi.Pointer<stbi__huffman> h,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__huffman>, ffi.Pointer<ffi.Int>)>()
external int stbi__build_huffman(
  ffi.Pointer<stbi__huffman> h,
  ffi.Pointer<ffi.Int> count,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__check_png_header(
  ffi.Pointer<stbi__context> s,
);

/// take a -128..127 value and stbi__clamp it and convert to 0..255
@ffi.Native<stbi_uc Function(ffi.Int)>()
external int stbi__clamp(
  int x,
);

/// clean up the temporary component buffers
@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__jpeg>)>()
external void stbi__cleanup_jpeg(
  ffi.Pointer<stbi__jpeg> j,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__zbuf>)>()
external int stbi__compute_huffman_codes(
  ffi.Pointer<stbi__zbuf> a,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__png>, ffi.Pointer<stbi_uc>, ffi.Int)>()
external int stbi__compute_transparency(
  ffi.Pointer<stbi__png> z,
  ffi.Pointer<stbi_uc> tc,
  int out_n,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<stbi__png>, ffi.Pointer<stbi__uint16>, ffi.Int)>()
external int stbi__compute_transparency16(
  ffi.Pointer<stbi__png> z,
  ffi.Pointer<stbi__uint16> tc,
  int out_n,
);

/// ///////////////////////////////////////////////////////////////////////////
///
/// generic converter from built-in img_n to req_comp
/// individual types do this automatically as much as possible (e.g. jpeg
/// does all cases internally since it needs to colorspace convert anyway,
/// and it never has alpha, so very few cases ). png can automatically
/// interleave an alpha=255 channel, but falls back to this for other cases
///
/// assume data buffer is malloced, so malloc a new one and free that one
/// only failure mode is malloc failing
@ffi.Native<stbi_uc Function(ffi.Int, ffi.Int, ffi.Int)>()
external int stbi__compute_y(
  int r,
  int g,
  int b,
);

@ffi.Native<stbi__uint16 Function(ffi.Int, ffi.Int, ffi.Int)>()
external int stbi__compute_y_16(
  int r,
  int g,
  int b,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(
        ffi.Pointer<stbi__uint16>, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<stbi_uc> stbi__convert_16_to_8(
  ffi.Pointer<stbi__uint16> orig,
  int w,
  int h,
  int channels,
);

@ffi.Native<
    ffi.Pointer<stbi__uint16> Function(
        ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<stbi__uint16> stbi__convert_8_to_16(
  ffi.Pointer<stbi_uc> orig,
  int w,
  int h,
  int channels,
);

@ffi.Native<
    ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
        ffi.Int, ffi.Int, ffi.UnsignedInt, ffi.UnsignedInt)>()
external ffi.Pointer<ffi.UnsignedChar> stbi__convert_format(
  ffi.Pointer<ffi.UnsignedChar> data,
  int img_n,
  int req_comp,
  int x,
  int y,
);

@ffi.Native<
    ffi.Pointer<stbi__uint16> Function(ffi.Pointer<stbi__uint16>, ffi.Int,
        ffi.Int, ffi.UnsignedInt, ffi.UnsignedInt)>()
external ffi.Pointer<stbi__uint16> stbi__convert_format16(
  ffi.Pointer<stbi__uint16> data,
  int img_n,
  int req_comp,
  int x,
  int y,
);

@ffi.Native<
    ffi.Void Function(ffi.Int, ffi.Pointer<stbi_uc>, ffi.Pointer<stbi_uc>)>()
external void stbi__copyval(
  int channel,
  ffi.Pointer<stbi_uc> dest,
  ffi.Pointer<stbi_uc> src,
);

/// adds an extra all-255 alpha channel
/// dest == src is legal
/// img_n must be 1 or 3
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<stbi_uc>, ffi.Pointer<stbi_uc>, stbi__uint32, ffi.Int)>()
external void stbi__create_png_alpha_expand8(
  ffi.Pointer<stbi_uc> dest,
  ffi.Pointer<stbi_uc> src,
  int x,
  int img_n,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__png>, ffi.Pointer<stbi_uc>, stbi__uint32,
        ffi.Int, ffi.Int, ffi.Int, ffi.Int)>()
external int stbi__create_png_image(
  ffi.Pointer<stbi__png> a,
  ffi.Pointer<stbi_uc> image_data,
  int image_data_len,
  int out_n,
  int depth,
  int color,
  int interlaced,
);

/// create the png data from post-deflated data
@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__png>, ffi.Pointer<stbi_uc>, stbi__uint32,
        ffi.Int, stbi__uint32, stbi__uint32, ffi.Int, ffi.Int)>()
external int stbi__create_png_image_raw(
  ffi.Pointer<stbi__png> a,
  ffi.Pointer<stbi_uc> raw,
  int raw_len,
  int out_n,
  int x,
  int y,
  int depth,
  int color,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__png>)>()
external void stbi__de_iphone(
  ffi.Pointer<stbi__png> z,
);

@ffi.Native<ffi.Int>()
external int stbi__de_iphone_flag_global;

@ffi.Native<ffi.Int>()
external int stbi__de_iphone_flag_local;

@ffi.Native<ffi.Int>()
external int stbi__de_iphone_flag_set;

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__jpeg>, ffi.Int)>()
external int stbi__decode_jpeg_header(
  ffi.Pointer<stbi__jpeg> z,
  int scan,
);

/// decode image to YCbCr format
@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__jpeg>)>()
external int stbi__decode_jpeg_image(
  ffi.Pointer<stbi__jpeg> j,
);

@ffi.Array.multi([9])
@ffi.Native<ffi.Array<stbi_uc>>()
external ffi.Array<stbi_uc> stbi__depth_scale_table;

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__png>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi__result_info>)>()
external ffi.Pointer<ffi.Void> stbi__do_png(
  ffi.Pointer<stbi__png> p,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> n,
  int req_comp,
  ffi.Pointer<stbi__result_info> ri,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__zbuf>, ffi.Pointer<ffi.Char>, ffi.Int,
        ffi.Int, ffi.Int)>()
external int stbi__do_zlib(
  ffi.Pointer<stbi__zbuf> a,
  ffi.Pointer<ffi.Char> obuf,
  int olen,
  int exp,
  int parse_header,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>()
external int stbi__err(
  ffi.Pointer<ffi.Char> str,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<stbi__png>, ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int)>()
external int stbi__expand_png_palette(
  ffi.Pointer<stbi__png> a,
  ffi.Pointer<stbi_uc> palette,
  int len,
  int pal_img_n,
);

/// combined JPEG 'receive' and JPEG 'extend', since baseline
/// always extends everything it receives.
@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__jpeg>, ffi.Int)>()
external int stbi__extend_receive(
  ffi.Pointer<stbi__jpeg> j,
  int n,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__zbuf>)>()
external void stbi__fill_bits(
  ffi.Pointer<stbi__zbuf> z,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Int)>()
external void stbi__float_postprocess(
  ffi.Pointer<ffi.Float> result,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
);

@ffi.Native<
    ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<FILE> stbi__fopen(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<ffi.Char> mode,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__jpeg>, ffi.Int, ffi.Int)>()
external int stbi__free_jpeg_components(
  ffi.Pointer<stbi__jpeg> z,
  int ncomp,
  int why,
);

@ffi.Native<ffi.Pointer<ffi.Char>>()
external ffi.Pointer<ffi.Char> stbi__g_failure_reason;

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__get16be(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__get16le(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<stbi__uint32 Function(ffi.Pointer<stbi__context>)>()
external int stbi__get32be(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<stbi__uint32 Function(ffi.Pointer<stbi__context>)>()
external int stbi__get32le(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<stbi_uc Function(ffi.Pointer<stbi__context>)>()
external int stbi__get8(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<stbi__pngchunk Function(ffi.Pointer<stbi__context>)>()
external stbi__pngchunk stbi__get_chunk_header(
  ffi.Pointer<stbi__context> s,
);

/// if there's a pending marker from the entropy stream, return that
/// otherwise, fetch from the stream and get a marker. if there's no
/// marker, return 0xff, which is never a valid marker value
@ffi.Native<stbi_uc Function(ffi.Pointer<stbi__jpeg>)>()
external int stbi__get_marker(
  ffi.Pointer<stbi__jpeg> j,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<stbi__context>, ffi.Pointer<stbi_uc>, ffi.Int)>()
external int stbi__getn(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<stbi_uc> buffer,
  int n,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<stbi__gif>,
        ffi.Pointer<ffi.Int>, ffi.Int)>()
external int stbi__gif_header(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<stbi__gif> g,
  ffi.Pointer<ffi.Int> comp,
  int is_info,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__gif_info(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__gif_info_raw(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi__result_info>)>()
external ffi.Pointer<ffi.Void> stbi__gif_load(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
  ffi.Pointer<stbi__result_info> ri,
);

/// this function is designed to support animated gifs, although stb_image doesn't support it
/// two back is the image from two frames ago, used for a very specific disposal format
@ffi.Native<
    ffi.Pointer<stbi_uc> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<stbi__gif>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi_uc>)>()
external ffi.Pointer<stbi_uc> stbi__gif_load_next(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<stbi__gif> g,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
  ffi.Pointer<stbi_uc> two_back,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Pointer<stbi_uc>>, ffi.Int, ffi.Int)>()
external void stbi__gif_parse_colortable(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Pointer<stbi_uc>> pal,
  int num_entries,
  int transp,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__gif_test(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__gif_test_raw(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__jpeg>)>()
external void stbi__grow_buffer_unsafe(
  ffi.Pointer<stbi__jpeg> j,
);

@ffi.Native<ffi.Float>()
external double stbi__h2l_gamma_i;

@ffi.Native<ffi.Float>()
external double stbi__h2l_scale_i;

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<stbi_uc>, ffi.Int)>()
external void stbi__hdr_convert(
  ffi.Pointer<ffi.Float> output,
  ffi.Pointer<stbi_uc> input,
  int req_comp,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<ffi.Char> stbi__hdr_gettoken(
  ffi.Pointer<stbi__context> z,
  ffi.Pointer<ffi.Char> buffer,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__hdr_info(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi__result_info>)>()
external ffi.Pointer<ffi.Float> stbi__hdr_load(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
  ffi.Pointer<stbi__result_info> ri,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__hdr_test(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Char>)>()
external int stbi__hdr_test_core(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Char> signature,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<stbi_uc> stbi__hdr_to_ldr(
  ffi.Pointer<ffi.Float> data,
  int x,
  int y,
  int comp,
);

/// returns 0..31 for the highest set bit
@ffi.Native<ffi.Int Function(ffi.UnsignedInt)>()
external int stbi__high_bit(
  int z,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbi_uc>, ffi.Int, ffi.Pointer<ffi.Short>)>()
external void stbi__idct_block(
  ffi.Pointer<stbi_uc> out,
  int out_stride,
  ffi.Pointer<ffi.Short> data,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__info_main(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__is_16_main(
  ffi.Pointer<stbi__context> s,
);

/// bias[n] = (-1<<n) + 1
@ffi.Array.multi([16])
@ffi.Native<ffi.Array<ffi.Int>>()
external ffi.Array<ffi.Int> stbi__jbias;

/// decode one 64-entry block--
@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<stbi__jpeg>,
        ffi.Pointer<ffi.Short>,
        ffi.Pointer<stbi__huffman>,
        ffi.Pointer<stbi__huffman>,
        ffi.Pointer<stbi__int16>,
        ffi.Int,
        ffi.Pointer<stbi__uint16>)>()
external int stbi__jpeg_decode_block(
  ffi.Pointer<stbi__jpeg> j,
  ffi.Pointer<ffi.Short> data,
  ffi.Pointer<stbi__huffman> hdc,
  ffi.Pointer<stbi__huffman> hac,
  ffi.Pointer<stbi__int16> fac,
  int b,
  ffi.Pointer<stbi__uint16> dequant,
);

/// @OPTIMIZE: store non-zigzagged during the decode passes,
/// and only de-zigzag when dequantizing
@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__jpeg>, ffi.Pointer<ffi.Short>,
        ffi.Pointer<stbi__huffman>, ffi.Pointer<stbi__int16>)>()
external int stbi__jpeg_decode_block_prog_ac(
  ffi.Pointer<stbi__jpeg> j,
  ffi.Pointer<ffi.Short> data,
  ffi.Pointer<stbi__huffman> hac,
  ffi.Pointer<stbi__int16> fac,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__jpeg>, ffi.Pointer<ffi.Short>,
        ffi.Pointer<stbi__huffman>, ffi.Int)>()
external int stbi__jpeg_decode_block_prog_dc(
  ffi.Pointer<stbi__jpeg> j,
  ffi.Pointer<ffi.Short> data,
  ffi.Pointer<stbi__huffman> hdc,
  int b,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Short>, ffi.Pointer<stbi__uint16>)>()
external void stbi__jpeg_dequantize(
  ffi.Pointer<ffi.Short> data,
  ffi.Pointer<stbi__uint16> dequant,
);

/// given a value that's at position X in the zigzag stream,
/// where does it appear in the 8x8 matrix coded as row-major?
@ffi.Array.multi([79])
@ffi.Native<ffi.Array<stbi_uc>>()
external ffi.Array<stbi_uc> stbi__jpeg_dezigzag;

@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__jpeg>)>()
external void stbi__jpeg_finish(
  ffi.Pointer<stbi__jpeg> z,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__jpeg>)>()
external int stbi__jpeg_get_bit(
  ffi.Pointer<stbi__jpeg> j,
);

/// get some unsigned bits
@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__jpeg>, ffi.Int)>()
external int stbi__jpeg_get_bits(
  ffi.Pointer<stbi__jpeg> j,
  int n,
);

/// decode a jpeg huffman value from the bitstream
@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__jpeg>, ffi.Pointer<stbi__huffman>)>()
external int stbi__jpeg_huff_decode(
  ffi.Pointer<stbi__jpeg> j,
  ffi.Pointer<stbi__huffman> h,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__jpeg_info(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__jpeg>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__jpeg_info_raw(
  ffi.Pointer<stbi__jpeg> j,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi__result_info>)>()
external ffi.Pointer<ffi.Void> stbi__jpeg_load(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
  ffi.Pointer<stbi__result_info> ri,
);

/// after a restart interval, stbi__jpeg_reset the entropy decoder and
/// the dc prediction
@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__jpeg>)>()
external void stbi__jpeg_reset(
  ffi.Pointer<stbi__jpeg> j,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__jpeg_test(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<ffi.Float>()
external double stbi__l2h_gamma;

@ffi.Native<ffi.Float>()
external double stbi__l2h_scale;

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<ffi.Float> stbi__ldr_to_hdr(
  ffi.Pointer<stbi_uc> data,
  int x,
  int y,
  int comp,
);

@ffi.Native<
    ffi.Pointer<stbi__uint16> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int)>()
external ffi.Pointer<stbi__uint16> stbi__load_and_postprocess_16bit(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
);

@ffi.Native<
    ffi.Pointer<ffi.UnsignedChar> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int)>()
external ffi.Pointer<ffi.UnsignedChar> stbi__load_and_postprocess_8bit(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Pointer<ffi.Int>>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int)>()
external ffi.Pointer<ffi.Void> stbi__load_gif_main(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Pointer<ffi.Int>> delays,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> z,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<stbi__gif>, ffi.Pointer<stbi_uc>,
        ffi.Pointer<ffi.Pointer<ffi.Int>>)>()
external ffi.Pointer<ffi.Void> stbi__load_gif_main_outofmem(
  ffi.Pointer<stbi__gif> g,
  ffi.Pointer<stbi_uc> out,
  ffi.Pointer<ffi.Pointer<ffi.Int>> delays,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi__result_info>,
        ffi.Int)>()
external ffi.Pointer<ffi.Void> stbi__load_main(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
  ffi.Pointer<stbi__result_info> ri,
  int bpc,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int)>()
external ffi.Pointer<ffi.Float> stbi__loadf_main(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
);

/// returns 1 if "a*b + add" has no negative terms/factors and doesn't overflow
@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>()
external int stbi__mad2sizes_valid(
  int a,
  int b,
  int add,
);

/// returns 1 if "a*b*c + add" has no negative terms/factors and doesn't overflow
@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int)>()
external int stbi__mad3sizes_valid(
  int a,
  int b,
  int c,
  int add,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>()
external int stbi__mad4sizes_valid(
  int a,
  int b,
  int c,
  int d,
  int add,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size)>()
external ffi.Pointer<ffi.Void> stbi__malloc(
  int size,
);

/// mallocs with size overflow checking
@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<ffi.Void> stbi__malloc_mad2(
  int a,
  int b,
  int add,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<ffi.Void> stbi__malloc_mad3(
  int a,
  int b,
  int c,
  int add,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>()
external ffi.Pointer<ffi.Void> stbi__malloc_mad4(
  int a,
  int b,
  int c,
  int d,
  int add,
);

/// returns 1 if the product of two ints fits in a signed short, 0 on overflow.
@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>()
external int stbi__mul2shorts_valid(
  int a,
  int b,
);

/// returns 1 if the product is valid, 0 on overflow.
/// negative factors are considered invalid.
@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>()
external int stbi__mul2sizes_valid(
  int a,
  int b,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__gif>, stbi__uint16)>()
external void stbi__out_gif_code(
  ffi.Pointer<stbi__gif> g,
  int code,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>()
external int stbi__paeth(
  int a,
  int b,
  int c,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__jpeg>)>()
external int stbi__parse_entropy_coded_data(
  ffi.Pointer<stbi__jpeg> z,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__zbuf>)>()
external int stbi__parse_huffman_block(
  ffi.Pointer<stbi__zbuf> a,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__png>, ffi.Int, ffi.Int)>()
external int stbi__parse_png_file(
  ffi.Pointer<stbi__png> z,
  int scan,
  int req_comp,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__zbuf>)>()
external int stbi__parse_uncompressed_block(
  ffi.Pointer<stbi__zbuf> a,
);

/// Init algorithm:
/// {
/// int i;   // use <= to match clearly with spec
/// for (i=0; i <= 143; ++i)     stbi__zdefault_length[i]   = 8;
/// for (   ; i <= 255; ++i)     stbi__zdefault_length[i]   = 9;
/// for (   ; i <= 279; ++i)     stbi__zdefault_length[i]   = 7;
/// for (   ; i <= 287; ++i)     stbi__zdefault_length[i]   = 8;
///
/// for (i=0; i <=  31; ++i)     stbi__zdefault_distance[i] = 5;
/// }
@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__zbuf>, ffi.Int)>()
external int stbi__parse_zlib(
  ffi.Pointer<stbi__zbuf> a,
  int parse_header,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__zbuf>)>()
external int stbi__parse_zlib_header(
  ffi.Pointer<stbi__zbuf> a,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__pic_info(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Char>)>()
external int stbi__pic_is4(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Char> str,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi__result_info>)>()
external ffi.Pointer<ffi.Void> stbi__pic_load(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
  ffi.Pointer<stbi__result_info> ri,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(ffi.Pointer<stbi__context>, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Int>, ffi.Pointer<stbi_uc>)>()
external ffi.Pointer<stbi_uc> stbi__pic_load_core(
  ffi.Pointer<stbi__context> s,
  int width,
  int height,
  ffi.Pointer<ffi.Int> comp,
  ffi.Pointer<stbi_uc> result,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__pic_test(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__pic_test_core(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__png_info(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__png>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__png_info_raw(
  ffi.Pointer<stbi__png> p,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__png_is16(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi__result_info>)>()
external ffi.Pointer<ffi.Void> stbi__png_load(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
  ffi.Pointer<stbi__result_info> ri,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__png_test(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Char>)>()
external int stbi__pnm_getinteger(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Char> c,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__pnm_info(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__pnm_is16(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<ffi.Int Function(ffi.Char)>()
external int stbi__pnm_isdigit(
  int c,
);

@ffi.Native<ffi.Int Function(ffi.Char)>()
external int stbi__pnm_isspace(
  int c,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi__result_info>)>()
external ffi.Pointer<ffi.Void> stbi__pnm_load(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
  ffi.Pointer<stbi__result_info> ri,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Char>)>()
external void stbi__pnm_skip_whitespace(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Char> c,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__pnm_test(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__jpeg>, ffi.Int)>()
external int stbi__process_frame_header(
  ffi.Pointer<stbi__jpeg> z,
  int scan,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(
        ffi.Pointer<stbi__context>, ffi.Pointer<stbi__gif>)>()
external ffi.Pointer<stbi_uc> stbi__process_gif_raster(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<stbi__gif> g,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__jpeg>, ffi.Int)>()
external int stbi__process_marker(
  ffi.Pointer<stbi__jpeg> z,
  int m,
);

/// after we see SOS
@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__jpeg>)>()
external int stbi__process_scan_header(
  ffi.Pointer<stbi__jpeg> z,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<stbi__context>, ffi.Pointer<stbi_uc>, ffi.Int)>()
external int stbi__psd_decode_rle(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<stbi_uc> p,
  int pixelCount,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__psd_info(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__psd_is16(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi__result_info>,
        ffi.Int)>()
external ffi.Pointer<ffi.Void> stbi__psd_load(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
  ffi.Pointer<stbi__result_info> ri,
  int bpc,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__psd_test(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(
        ffi.Pointer<stbi__context>, ffi.Int, ffi.Pointer<stbi_uc>)>()
external ffi.Pointer<stbi_uc> stbi__readval(
  ffi.Pointer<stbi__context> s,
  int channel,
  ffi.Pointer<stbi_uc> dest,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__context>)>()
external void stbi__refill_buffer(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(ffi.Pointer<stbi_uc>, ffi.Pointer<stbi_uc>,
        ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int)>()
external ffi.Pointer<stbi_uc> stbi__resample_row_generic(
  ffi.Pointer<stbi_uc> out,
  ffi.Pointer<stbi_uc> in_near,
  ffi.Pointer<stbi_uc> in_far,
  int w,
  int hs,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(ffi.Pointer<stbi_uc>, ffi.Pointer<stbi_uc>,
        ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int)>()
external ffi.Pointer<stbi_uc> stbi__resample_row_h_2(
  ffi.Pointer<stbi_uc> out,
  ffi.Pointer<stbi_uc> in_near,
  ffi.Pointer<stbi_uc> in_far,
  int w,
  int hs,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(ffi.Pointer<stbi_uc>, ffi.Pointer<stbi_uc>,
        ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int)>()
external ffi.Pointer<stbi_uc> stbi__resample_row_hv_2(
  ffi.Pointer<stbi_uc> out,
  ffi.Pointer<stbi_uc> in_near,
  ffi.Pointer<stbi_uc> in_far,
  int w,
  int hs,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(ffi.Pointer<stbi_uc>, ffi.Pointer<stbi_uc>,
        ffi.Pointer<stbi_uc>, ffi.Int, ffi.Int)>()
external ffi.Pointer<stbi_uc> stbi__resample_row_v_2(
  ffi.Pointer<stbi_uc> out,
  ffi.Pointer<stbi_uc> in_near,
  ffi.Pointer<stbi_uc> in_far,
  int w,
  int hs,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__context>)>()
external void stbi__rewind(
  ffi.Pointer<stbi__context> s,
);

/// set up the kernels
@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__jpeg>)>()
external void stbi__setup_jpeg(
  ffi.Pointer<stbi__jpeg> j,
);

/// extract an arbitrarily-aligned N-bit value (N=bits)
/// from v, and then make it 8-bits long and fractionally
/// extend it to full full range.
@ffi.Native<ffi.Int Function(ffi.UnsignedInt, ffi.Int, ffi.Int)>()
external int stbi__shiftsigned(
  int v,
  int shift,
  int bits,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__context>, ffi.Int)>()
external void stbi__skip(
  ffi.Pointer<stbi__context> s,
  int n,
);

@ffi.Native<stbi_uc Function(ffi.Pointer<stbi__jpeg>)>()
external int stbi__skip_jpeg_junk_at_end(
  ffi.Pointer<stbi__jpeg> j,
);

/// initialize a callback-based context
@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbi__context>,
        ffi.Pointer<stbi_io_callbacks>, ffi.Pointer<ffi.Void>)>()
external void stbi__start_callbacks(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<stbi_io_callbacks> c,
  ffi.Pointer<ffi.Void> user,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<stbi__context>, ffi.Pointer<FILE>)>()
external void stbi__start_file(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<FILE> f,
);

/// initialize a memory-decode context
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<stbi__context>, ffi.Pointer<stbi_uc>, ffi.Int)>()
external void stbi__start_mem(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<stbi_uc> buffer,
  int len,
);

@ffi.Native<stbi_io_callbacks>()
external stbi_io_callbacks stbi__stdio_callbacks;

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>)>()
external int stbi__stdio_eof(
  ffi.Pointer<ffi.Void> user,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external int stbi__stdio_read(
  ffi.Pointer<ffi.Void> user,
  ffi.Pointer<ffi.Char> data,
  int size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>()
external void stbi__stdio_skip(
  ffi.Pointer<ffi.Void> user,
  int n,
);

/// returns STBI_rgb or whatever, 0 on error
@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external int stbi__tga_get_comp(
  int bits_per_pixel,
  int is_grey,
  ffi.Pointer<ffi.Int> is_rgb16,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__context>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi__tga_info(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<stbi__context>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int,
        ffi.Pointer<stbi__result_info>)>()
external ffi.Pointer<ffi.Void> stbi__tga_load(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
  ffi.Pointer<stbi__result_info> ri,
);

/// read 16bit value and convert to 24bit RGB
@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbi__context>, ffi.Pointer<stbi_uc>)>()
external void stbi__tga_read_rgb16(
  ffi.Pointer<stbi__context> s,
  ffi.Pointer<stbi_uc> out,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__context>)>()
external int stbi__tga_test(
  ffi.Pointer<stbi__context> s,
);

@ffi.Native<ffi.Int>()
external int stbi__unpremultiply_on_load_global;

@ffi.Native<ffi.Int>()
external int stbi__unpremultiply_on_load_local;

@ffi.Native<ffi.Int>()
external int stbi__unpremultiply_on_load_set;

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int, ffi.Int)>()
external void stbi__vertical_flip(
  ffi.Pointer<ffi.Void> image,
  int w,
  int h,
  int bytes_per_pixel,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>()
external void stbi__vertical_flip_slices(
  ffi.Pointer<ffi.Void> image,
  int w,
  int h,
  int z,
  int bytes_per_pixel,
);

@ffi.Native<ffi.Int>()
external int stbi__vertically_flip_on_load_global;

@ffi.Native<ffi.Int>()
external int stbi__vertically_flip_on_load_local;

@ffi.Native<ffi.Int>()
external int stbi__vertically_flip_on_load_set;

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<stbi__zhuffman>, ffi.Pointer<stbi_uc>, ffi.Int)>()
external int stbi__zbuild_huffman(
  ffi.Pointer<stbi__zhuffman> z,
  ffi.Pointer<stbi_uc> sizelist,
  int num,
);

@ffi.Array.multi([32])
@ffi.Native<ffi.Array<stbi_uc>>()
external ffi.Array<stbi_uc> stbi__zdefault_distance;

@ffi.Array.multi([288])
@ffi.Native<ffi.Array<stbi_uc>>()
external ffi.Array<stbi_uc> stbi__zdefault_length;

@ffi.Array.multi([32])
@ffi.Native<ffi.Array<ffi.Int>>()
external ffi.Array<ffi.Int> stbi__zdist_base;

@ffi.Array.multi([32])
@ffi.Native<ffi.Array<ffi.Int>>()
external ffi.Array<ffi.Int> stbi__zdist_extra;

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi__zbuf>)>()
external int stbi__zeof(
  ffi.Pointer<stbi__zbuf> z,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__zbuf>, ffi.Pointer<ffi.Char>, ffi.Int)>()
external int stbi__zexpand(
  ffi.Pointer<stbi__zbuf> z,
  ffi.Pointer<ffi.Char> zout,
  int n,
);

@ffi.Native<stbi_uc Function(ffi.Pointer<stbi__zbuf>)>()
external int stbi__zget8(
  ffi.Pointer<stbi__zbuf> z,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__zbuf>, ffi.Pointer<stbi__zhuffman>)>()
external int stbi__zhuffman_decode(
  ffi.Pointer<stbi__zbuf> a,
  ffi.Pointer<stbi__zhuffman> z,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi__zbuf>, ffi.Pointer<stbi__zhuffman>)>()
external int stbi__zhuffman_decode_slowpath(
  ffi.Pointer<stbi__zbuf> a,
  ffi.Pointer<stbi__zhuffman> z,
);

@ffi.Array.multi([31])
@ffi.Native<ffi.Array<ffi.Int>>()
external ffi.Array<ffi.Int> stbi__zlength_base;

@ffi.Array.multi([31])
@ffi.Native<ffi.Array<ffi.Int>>()
external ffi.Array<ffi.Int> stbi__zlength_extra;

@ffi.Native<ffi.UnsignedInt Function(ffi.Pointer<stbi__zbuf>, ffi.Int)>()
external int stbi__zreceive(
  ffi.Pointer<stbi__zbuf> z,
  int n,
);

/// indicate whether we should process iphone images back to canonical format,
/// or just pass them through "as-is"
@ffi.Native<ffi.Void Function(ffi.Int)>()
external void stbi_convert_iphone_png_to_rgb(
  int flag_true_if_should_convert,
);

@ffi.Native<ffi.Void Function(ffi.Int)>()
external void stbi_convert_iphone_png_to_rgb_thread(
  int flag_true_if_should_convert,
);

/// get a VERY brief reason for failure
/// on most compilers (and ALL modern mainstream compilers) this is threadsafe
@ffi.Native<ffi.Pointer<ffi.Char> Function()>()
external ffi.Pointer<ffi.Char> stbi_failure_reason();

@ffi.Native<ffi.Void Function(ffi.Float)>()
external void stbi_hdr_to_ldr_gamma(
  double gamma,
);

@ffi.Native<ffi.Void Function(ffi.Float)>()
external void stbi_hdr_to_ldr_scale(
  double scale,
);

/// free the loaded image -- this is just free()
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>()
external void stbi_image_free(
  ffi.Pointer<ffi.Void> retval_from_stbi_load,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi_info(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi_io_callbacks>, ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi_info_from_callbacks(
  ffi.Pointer<stbi_io_callbacks> clbk,
  ffi.Pointer<ffi.Void> user,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi_info_from_file(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

/// get image dimensions & components without fully decoding
@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi_uc>, ffi.Int, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int stbi_info_from_memory(
  ffi.Pointer<stbi_uc> buffer,
  int len,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> comp,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>()
external int stbi_is_16_bit(
  ffi.Pointer<ffi.Char> filename,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi_io_callbacks>, ffi.Pointer<ffi.Void>)>()
external int stbi_is_16_bit_from_callbacks(
  ffi.Pointer<stbi_io_callbacks> clbk,
  ffi.Pointer<ffi.Void> user,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>()
external int stbi_is_16_bit_from_file(
  ffi.Pointer<FILE> f,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi_uc>, ffi.Int)>()
external int stbi_is_16_bit_from_memory(
  ffi.Pointer<stbi_uc> buffer,
  int len,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>()
external int stbi_is_hdr(
  ffi.Pointer<ffi.Char> filename,
);

/// stbi_is_hdr is always defined, but always returns false if STBI_NO_HDR
@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbi_io_callbacks>, ffi.Pointer<ffi.Void>)>()
external int stbi_is_hdr_from_callbacks(
  ffi.Pointer<stbi_io_callbacks> clbk,
  ffi.Pointer<ffi.Void> user,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<FILE>)>()
external int stbi_is_hdr_from_file(
  ffi.Pointer<FILE> f,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbi_uc>, ffi.Int)>()
external int stbi_is_hdr_from_memory(
  ffi.Pointer<stbi_uc> buffer,
  int len,
);

@ffi.Native<ffi.Void Function(ffi.Float)>()
external void stbi_ldr_to_hdr_gamma(
  double gamma,
);

@ffi.Native<ffi.Void Function(ffi.Float)>()
external void stbi_ldr_to_hdr_scale(
  double scale,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Int)>()
external ffi.Pointer<stbi_uc> stbi_load(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

@ffi.Native<
    ffi.Pointer<stbi_us> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Int)>()
external ffi.Pointer<stbi_us> stbi_load_16(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

@ffi.Native<
    ffi.Pointer<stbi_us> Function(
        ffi.Pointer<stbi_io_callbacks>,
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int)>()
external ffi.Pointer<stbi_us> stbi_load_16_from_callbacks(
  ffi.Pointer<stbi_io_callbacks> clbk,
  ffi.Pointer<ffi.Void> user,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

/// /////////////////////////////////
///
/// 16-bits-per-channel interface
@ffi.Native<
    ffi.Pointer<stbi_us> Function(
        ffi.Pointer<stbi_uc>,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int)>()
external ffi.Pointer<stbi_us> stbi_load_16_from_memory(
  ffi.Pointer<stbi_uc> buffer,
  int len,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(
        ffi.Pointer<stbi_io_callbacks>,
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int)>()
external ffi.Pointer<stbi_uc> stbi_load_from_callbacks(
  ffi.Pointer<stbi_io_callbacks> clbk,
  ffi.Pointer<ffi.Void> user,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Int)>()
external ffi.Pointer<stbi_uc> stbi_load_from_file(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

@ffi.Native<
    ffi.Pointer<stbi_us> Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Int)>()
external ffi.Pointer<stbi_us> stbi_load_from_file_16(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

/// /////////////////////////////////
///
/// 8-bits-per-channel interface
@ffi.Native<
    ffi.Pointer<stbi_uc> Function(
        ffi.Pointer<stbi_uc>,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int)>()
external ffi.Pointer<stbi_uc> stbi_load_from_memory(
  ffi.Pointer<stbi_uc> buffer,
  int len,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

@ffi.Native<
    ffi.Pointer<stbi_uc> Function(
        ffi.Pointer<stbi_uc>,
        ffi.Int,
        ffi.Pointer<ffi.Pointer<ffi.Int>>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int)>()
external ffi.Pointer<stbi_uc> stbi_load_gif_from_memory(
  ffi.Pointer<stbi_uc> buffer,
  int len,
  ffi.Pointer<ffi.Pointer<ffi.Int>> delays,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> z,
  ffi.Pointer<ffi.Int> comp,
  int req_comp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Int)>()
external ffi.Pointer<ffi.Float> stbi_loadf(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<stbi_io_callbacks>,
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int)>()
external ffi.Pointer<ffi.Float> stbi_loadf_from_callbacks(
  ffi.Pointer<stbi_io_callbacks> clbk,
  ffi.Pointer<ffi.Void> user,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Int)>()
external ffi.Pointer<ffi.Float> stbi_loadf_from_file(
  ffi.Pointer<FILE> f,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<stbi_uc>,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Int)>()
external ffi.Pointer<ffi.Float> stbi_loadf_from_memory(
  ffi.Pointer<stbi_uc> buffer,
  int len,
  ffi.Pointer<ffi.Int> x,
  ffi.Pointer<ffi.Int> y,
  ffi.Pointer<ffi.Int> channels_in_file,
  int desired_channels,
);

/// flip the image vertically, so the first pixel in the output array is the bottom left
@ffi.Native<ffi.Void Function(ffi.Int)>()
external void stbi_set_flip_vertically_on_load(
  int flag_true_if_should_flip,
);

@ffi.Native<ffi.Void Function(ffi.Int)>()
external void stbi_set_flip_vertically_on_load_thread(
  int flag_true_if_should_flip,
);

/// for image formats that explicitly notate that they have premultiplied alpha,
/// we just return the colors as stored in the file. set this flag to force
/// unpremultiplication. results are undefined if the unpremultiply overflow.
@ffi.Native<ffi.Void Function(ffi.Int)>()
external void stbi_set_unpremultiply_on_load(
  int flag_true_if_should_unpremultiply,
);

/// as above, but only applies to images loaded on the thread that calls the function
/// this function is only available if your compiler supports thread-local variables;
/// calling it will fail to link if your compiler doesn't
@ffi.Native<ffi.Void Function(ffi.Int)>()
external void stbi_set_unpremultiply_on_load_thread(
  int flag_true_if_should_unpremultiply,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>()
external int stbi_zlib_decode_buffer(
  ffi.Pointer<ffi.Char> obuffer,
  int olen,
  ffi.Pointer<ffi.Char> ibuffer,
  int ilen,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<ffi.Char> stbi_zlib_decode_malloc(
  ffi.Pointer<ffi.Char> buffer,
  int len,
  ffi.Pointer<ffi.Int> outlen,
);

/// ZLIB client - used by PNG, available for other purposes
@ffi.Native<
    ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<ffi.Char> stbi_zlib_decode_malloc_guesssize(
  ffi.Pointer<ffi.Char> buffer,
  int len,
  int initial_size,
  ffi.Pointer<ffi.Int> outlen,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
        ffi.Pointer<ffi.Int>, ffi.Int)>()
external ffi.Pointer<ffi.Char> stbi_zlib_decode_malloc_guesssize_headerflag(
  ffi.Pointer<ffi.Char> buffer,
  int len,
  int initial_size,
  ffi.Pointer<ffi.Int> outlen,
  int parse_header,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>()
external int stbi_zlib_decode_noheader_buffer(
  ffi.Pointer<ffi.Char> obuffer,
  int olen,
  ffi.Pointer<ffi.Char> ibuffer,
  int ilen,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Int>)>()
external ffi.Pointer<ffi.Char> stbi_zlib_decode_noheader_malloc(
  ffi.Pointer<ffi.Char> buffer,
  int len,
  ffi.Pointer<ffi.Int> outlen,
);

@ffi.Native<
        ffi.Pointer<stbir__info> Function(
            ffi.Pointer<stbir__sampler>,
            ffi.Pointer<stbir__sampler>,
            ffi.Pointer<stbir__contributors>,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Void>)>(
    symbol: 'stbir__alloc_internal_mem_and_build_samplers')
external ffi.Pointer<stbir__info> _stbir__alloc_internal_mem_and_build_samplers(
  ffi.Pointer<stbir__sampler> horizontal,
  ffi.Pointer<stbir__sampler> vertical,
  ffi.Pointer<stbir__contributors> conservative,
  int input_pixel_layout_public,
  int output_pixel_layout_public,
  int splits,
  int new_x,
  int new_y,
  int fast_alpha,
  ffi.Pointer<ffi.Void> user_data,
);

ffi.Pointer<stbir__info> stbir__alloc_internal_mem_and_build_samplers(
  ffi.Pointer<stbir__sampler> horizontal,
  ffi.Pointer<stbir__sampler> vertical,
  ffi.Pointer<stbir__contributors> conservative,
  StbirPixelLayout input_pixel_layout_public,
  StbirPixelLayout output_pixel_layout_public,
  int splits,
  int new_x,
  int new_y,
  int fast_alpha,
  ffi.Pointer<ffi.Void> user_data,
) =>
    _stbir__alloc_internal_mem_and_build_samplers(
      horizontal,
      vertical,
      conservative,
      input_pixel_layout_public.value,
      output_pixel_layout_public.value,
      splits,
      new_x,
      new_y,
      fast_alpha,
      user_data,
    );

@ffi.Array.multi([7])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__kernel_callback>>>()
external ffi.Array<ffi.Pointer<stbir__kernel_callback>> stbir__builtin_kernels;

@ffi.Array.multi([7])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__support_callback>>>()
external ffi.Array<ffi.Pointer<stbir__support_callback>>
    stbir__builtin_supports;

@ffi.Native<
    ffi.Void Function(
        ffi.Int,
        ffi.Int,
        ffi.Float,
        ffi.Pointer<stbir__kernel_callback>,
        ffi.Pointer<stbir__scale_info>,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Void>)>()
external void stbir__calculate_coefficients_for_gather_downsample(
  int start,
  int end,
  double in_pixels_radius,
  ffi.Pointer<stbir__kernel_callback> kernel,
  ffi.Pointer<stbir__scale_info> scale_info,
  int coefficient_width,
  int num_contributors,
  ffi.Pointer<stbir__contributors> contributors,
  ffi.Pointer<ffi.Float> coefficient_group,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<
        ffi.Void Function(
            ffi.Float,
            ffi.Pointer<stbir__kernel_callback>,
            ffi.Pointer<stbir__scale_info>,
            ffi.Int,
            ffi.Pointer<stbir__contributors>,
            ffi.Pointer<ffi.Float>,
            ffi.Int,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Void>)>(
    symbol: 'stbir__calculate_coefficients_for_gather_upsample')
external void _stbir__calculate_coefficients_for_gather_upsample(
  double out_filter_radius,
  ffi.Pointer<stbir__kernel_callback> kernel,
  ffi.Pointer<stbir__scale_info> scale_info,
  int num_contributors,
  ffi.Pointer<stbir__contributors> contributors,
  ffi.Pointer<ffi.Float> coefficient_group,
  int coefficient_width,
  int edge,
  ffi.Pointer<ffi.Void> user_data,
);

void stbir__calculate_coefficients_for_gather_upsample(
  double out_filter_radius,
  ffi.Pointer<stbir__kernel_callback> kernel,
  ffi.Pointer<stbir__scale_info> scale_info,
  int num_contributors,
  ffi.Pointer<stbir__contributors> contributors,
  ffi.Pointer<ffi.Float> coefficient_group,
  int coefficient_width,
  StbirEdge edge,
  ffi.Pointer<ffi.Void> user_data,
) =>
    _stbir__calculate_coefficients_for_gather_upsample(
      out_filter_radius,
      kernel,
      scale_info,
      num_contributors,
      contributors,
      coefficient_group,
      coefficient_width,
      edge.value,
      user_data,
    );

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbir__sampler>, ffi.Pointer<stbir__sampler>,
        ffi.Pointer<ffi.Void>)>()
external void stbir__calculate_filters(
  ffi.Pointer<stbir__sampler> samp,
  ffi.Pointer<stbir__sampler> other_axis_for_pivot,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
        ffi.Float,
        ffi.Float,
        ffi.Float,
        ffi.Float,
        ffi.Int,
        ffi.UnsignedInt)>(symbol: 'stbir__calculate_in_pixel_range')
external void _stbir__calculate_in_pixel_range(
  ffi.Pointer<ffi.Int> first_pixel,
  ffi.Pointer<ffi.Int> last_pixel,
  double out_pixel_center,
  double out_filter_radius,
  double inv_scale,
  double out_shift,
  int input_size,
  int edge,
);

void stbir__calculate_in_pixel_range(
  ffi.Pointer<ffi.Int> first_pixel,
  ffi.Pointer<ffi.Int> last_pixel,
  double out_pixel_center,
  double out_filter_radius,
  double inv_scale,
  double out_shift,
  int input_size,
  StbirEdge edge,
) =>
    _stbir__calculate_in_pixel_range(
      first_pixel,
      last_pixel,
      out_pixel_center,
      out_filter_radius,
      inv_scale,
      out_shift,
      input_size,
      edge.value,
    );

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Float,
        ffi.Float, ffi.Float, ffi.Float, ffi.Int)>()
external void stbir__calculate_out_pixel_range(
  ffi.Pointer<ffi.Int> first_pixel,
  ffi.Pointer<ffi.Int> last_pixel,
  double in_pixel_center,
  double in_pixels_radius,
  double scale,
  double out_shift,
  int out_size,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbir__scale_info>, ffi.Int,
        ffi.Pointer<ffi.Int>, ffi.Int, ffi.Int, ffi.Double, ffi.Double)>()
external int stbir__calculate_region_transform(
  ffi.Pointer<stbir__scale_info> scale_info,
  int output_full_range,
  ffi.Pointer<ffi.Int> output_offset,
  int output_sub_range,
  int input_full_range,
  double input_s0,
  double input_s1,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Pointer<ffi.Void>>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Void>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.UnsignedInt)>(symbol: 'stbir__check_output_stuff')
external int _stbir__check_output_stuff(
  ffi.Pointer<ffi.Pointer<ffi.Void>> ret_ptr,
  ffi.Pointer<ffi.Int> ret_pitch,
  ffi.Pointer<ffi.Void> output_pixels,
  int type_size,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  int pixel_layout,
);

int stbir__check_output_stuff(
  ffi.Pointer<ffi.Pointer<ffi.Void>> ret_ptr,
  ffi.Pointer<ffi.Int> ret_pitch,
  ffi.Pointer<ffi.Void> output_pixels,
  int type_size,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  stbir_internal_pixel_layout pixel_layout,
) =>
    _stbir__check_output_stuff(
      ret_ptr,
      ret_pitch,
      output_pixels,
      type_size,
      output_w,
      output_h,
      output_stride_in_bytes,
      pixel_layout.value,
    );

@ffi.Native<
    ffi.Void Function(
        ffi.UnsignedInt,
        ffi.Pointer<stbir__filter_extent_info>,
        ffi.Pointer<stbir__scale_info>,
        ffi.Int,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>(symbol: 'stbir__cleanup_gathered_coefficients')
external void _stbir__cleanup_gathered_coefficients(
  int edge,
  ffi.Pointer<stbir__filter_extent_info> filter_info,
  ffi.Pointer<stbir__scale_info> scale_info,
  int num_contributors,
  ffi.Pointer<stbir__contributors> contributors,
  ffi.Pointer<ffi.Float> coefficient_group,
  int coefficient_width,
);

void stbir__cleanup_gathered_coefficients(
  StbirEdge edge,
  ffi.Pointer<stbir__filter_extent_info> filter_info,
  ffi.Pointer<stbir__scale_info> scale_info,
  int num_contributors,
  ffi.Pointer<stbir__contributors> contributors,
  ffi.Pointer<ffi.Float> coefficient_group,
  int coefficient_width,
) =>
    _stbir__cleanup_gathered_coefficients(
      edge.value,
      filter_info,
      scale_info,
      num_contributors,
      contributors,
      coefficient_group,
      coefficient_width,
    );

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Int,
        ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>()
external void stbir__clip(
  ffi.Pointer<ffi.Int> outx,
  ffi.Pointer<ffi.Int> outsubw,
  int outw,
  ffi.Pointer<ffi.Double> u0,
  ffi.Pointer<ffi.Double> u1,
);

/// 5 = 0=1chan, 1=2chan, 2=3chan, 3=4chan, 4=7chan
@ffi.Array.multi([5, 8, 4])
@ffi.Native<ffi.Array<ffi.Array<ffi.Array<ffi.Float>>>>()
external ffi.Array<ffi.Array<ffi.Array<ffi.Float>>> stbir__compute_weights;

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbir__info>,
        ffi.Pointer<stbir__per_split_info>, ffi.Int)>()
external void stbir__decode_and_resample_for_vertical_gather_loop(
  ffi.Pointer<stbir__info> stbir_info,
  ffi.Pointer<stbir__per_split_info> split_info,
  int n,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_float_linear(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_float_linear_ABGR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_float_linear_AR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_float_linear_ARGB(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_float_linear_BGRA(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_half_float_linear(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_half_float_linear_ABGR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_half_float_linear_AR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_half_float_linear_ARGB(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_half_float_linear_BGRA(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<stbir__info>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__decode_scanline(
  ffi.Pointer<stbir__info> stbir_info,
  int n,
  ffi.Pointer<ffi.Float> output_buffer,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint16_linear(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint16_linear_ABGR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint16_linear_AR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint16_linear_ARGB(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint16_linear_BGRA(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint16_linear_scaled(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint16_linear_scaled_ABGR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint16_linear_scaled_AR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint16_linear_scaled_ARGB(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint16_linear_scaled_BGRA(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_linear(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_linear_ABGR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_linear_AR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_linear_ARGB(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_linear_BGRA(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_linear_scaled(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_linear_scaled_ABGR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_linear_scaled_AR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_linear_scaled_ARGB(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_linear_scaled_BGRA(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_srgb(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_srgb2_linearalpha(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_srgb2_linearalpha_AR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_srgb4_linearalpha(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_srgb4_linearalpha_ABGR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_srgb4_linearalpha_ARGB(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_srgb4_linearalpha_BGRA(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_srgb_ABGR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_srgb_AR(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_srgb_ARGB(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<ffi.Float> stbir__decode_uint8_srgb_BGRA(
  ffi.Pointer<ffi.Float> decodep,
  int width_times_channels,
  ffi.Pointer<ffi.Void> inputp,
);

/// converts a double to a rational that has less than one float bit of error (returns 0 if unable to do so)
@ffi.Native<
    ffi.Int Function(ffi.Double, stbir_uint32, ffi.Pointer<stbir_uint32>,
        ffi.Pointer<stbir_uint32>, ffi.Int)>()
external int stbir__double_to_rational(
  double f,
  int limit,
  ffi.Pointer<stbir_uint32> numer,
  ffi.Pointer<stbir_uint32> denom,
  int limit_denom,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>()
external int stbir__edge_clamp_full(
  int n,
  int max,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>()
external int stbir__edge_reflect_full(
  int n,
  int max,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>()
external int stbir__edge_wrap_full(
  int n,
  int max,
);

@ffi.Array.multi([4])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__edge_wrap_func>>>()
external ffi.Array<ffi.Pointer<stbir__edge_wrap_func>> stbir__edge_wrap_slow;

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>()
external int stbir__edge_zero_full(
  int n,
  int max,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<stbir__info>, ffi.Pointer<stbir__per_split_info>)>()
external void stbir__encode_first_scanline_from_scatter(
  ffi.Pointer<stbir__info> stbir_info,
  ffi.Pointer<stbir__per_split_info> split_info,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_float_linear(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_float_linear_ABGR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_float_linear_AR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_float_linear_ARGB(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_float_linear_BGRA(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_half_float_linear(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_half_float_linear_ABGR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_half_float_linear_AR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_half_float_linear_ARGB(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_half_float_linear_BGRA(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbir__info>, ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Float>, ffi.Int)>()
external void stbir__encode_scanline(
  ffi.Pointer<stbir__info> stbir_info,
  ffi.Pointer<ffi.Void> output_buffer_data,
  ffi.Pointer<ffi.Float> encode_buffer,
  int row,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint16_linear(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint16_linear_ABGR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint16_linear_AR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint16_linear_ARGB(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint16_linear_BGRA(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint16_linear_scaled(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint16_linear_scaled_ABGR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint16_linear_scaled_AR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint16_linear_scaled_ARGB(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint16_linear_scaled_BGRA(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_linear(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_linear_ABGR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_linear_AR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_linear_ARGB(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_linear_BGRA(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_linear_scaled(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_linear_scaled_ABGR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_linear_scaled_AR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_linear_scaled_ARGB(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_linear_scaled_BGRA(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_srgb(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_srgb2_linearalpha(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_srgb2_linearalpha_AR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_srgb4_linearalpha(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_srgb4_linearalpha_ABGR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_srgb4_linearalpha_ARGB(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_srgb4_linearalpha_BGRA(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_srgb_ABGR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_srgb_AR(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_srgb_ARGB(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Float>)>()
external void stbir__encode_uint8_srgb_BGRA(
  ffi.Pointer<ffi.Void> outputp,
  int width_times_channels,
  ffi.Pointer<ffi.Float> encode,
);

/// format: [X A Xpm][X A Xpm] etc
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)>()
external void stbir__fancy_alpha_unweight_2ch(
  ffi.Pointer<ffi.Float> encode_buffer,
  int width_times_channels,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)>()
external void stbir__fancy_alpha_unweight_4ch(
  ffi.Pointer<ffi.Float> encode_buffer,
  int width_times_channels,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)>()
external void stbir__fancy_alpha_weight_2ch(
  ffi.Pointer<ffi.Float> out_buffer,
  int width_times_channels,
);

/// fancy alpha means we expand to keep both premultipied and non-premultiplied color channels
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)>()
external void stbir__fancy_alpha_weight_4ch(
  ffi.Pointer<ffi.Float> out_buffer,
  int width_times_channels,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float, ffi.Pointer<ffi.Void>)>()
external double stbir__filter_catmullrom(
  double x,
  double s,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float, ffi.Pointer<ffi.Void>)>()
external double stbir__filter_cubic(
  double x,
  double s,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float, ffi.Pointer<ffi.Void>)>()
external double stbir__filter_mitchell(
  double x,
  double s,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float, ffi.Pointer<ffi.Void>)>()
external double stbir__filter_point(
  double x,
  double s,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float, ffi.Pointer<ffi.Void>)>()
external double stbir__filter_trapezoid(
  double x,
  double scale,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Float, ffi.Pointer<ffi.Void>)>()
external double stbir__filter_triangle(
  double x,
  double s,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<stbir__info>)>()
external void stbir__free_internal_mem(
  ffi.Pointer<stbir__info> info,
);

/// this is how many coefficents per run of the filter (which is different
/// from the filter_pixel_width depending on if we are scattering or gathering)
@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<stbir__sampler>, ffi.Int, ffi.Pointer<ffi.Void>)>()
external int stbir__get_coefficient_width(
  ffi.Pointer<stbir__sampler> samp,
  int is_gather,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbir__sampler>,
        ffi.Pointer<stbir__contributors>, ffi.Pointer<ffi.Void>)>()
external void stbir__get_conservative_extents(
  ffi.Pointer<stbir__sampler> samp,
  ffi.Pointer<stbir__contributors> range,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbir__sampler>, ffi.Int)>()
external int stbir__get_contributors(
  ffi.Pointer<stbir__sampler> samp,
  int is_gather,
);

/// get information on the extents of a sampler
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<stbir__sampler>, ffi.Pointer<stbir__extents>)>()
external void stbir__get_extents(
  ffi.Pointer<stbir__sampler> samp,
  ffi.Pointer<stbir__extents> scanline_extents,
);

/// This is the maximum number of input samples that can affect an output sample
/// with the given filter from the output pixel's perspective
@ffi.Native<
    ffi.Int Function(ffi.Pointer<stbir__support_callback>, ffi.Float,
        ffi.Pointer<ffi.Void>)>()
external int stbir__get_filter_pixel_width(
  ffi.Pointer<stbir__support_callback> support,
  double scale,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>()
external int stbir__get_max_split(
  int splits,
  int height,
);

/// Get the ring buffer pointer for an index
@ffi.Native<
    ffi.Pointer<ffi.Float> Function(ffi.Pointer<stbir__info>,
        ffi.Pointer<stbir__per_split_info>, ffi.Int)>()
external ffi.Pointer<ffi.Float> stbir__get_ring_buffer_entry(
  ffi.Pointer<stbir__info> stbir_info,
  ffi.Pointer<stbir__per_split_info> split_info,
  int index,
);

/// Get the specified scan line from the ring buffer
@ffi.Native<
    ffi.Pointer<ffi.Float> Function(ffi.Pointer<stbir__info>,
        ffi.Pointer<stbir__per_split_info>, ffi.Int)>()
external ffi.Pointer<ffi.Float> stbir__get_ring_buffer_scanline(
  ffi.Pointer<stbir__info> stbir_info,
  ffi.Pointer<stbir__per_split_info> split_info,
  int get_scanline,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbir__per_split_info>, ffi.Int, ffi.Int,
        ffi.Int, ffi.Int)>()
external void stbir__get_split_info(
  ffi.Pointer<stbir__per_split_info> split_info,
  int splits,
  int output_height,
  int vertical_pixel_margin,
  int input_full_height,
);

@ffi.Array.multi([12])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>>()
external ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>
    stbir__horizontal_gather_1_channels_funcs;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_10_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_11_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_12_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_1_coeff(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_2_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_3_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_4_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_5_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_6_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_7_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_8_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_9_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Array.multi([4])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>>()
external ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>
    stbir__horizontal_gather_1_channels_with_n_coeffs_funcs;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_n_coeffs_mod0(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_n_coeffs_mod1(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_n_coeffs_mod2(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_1_channels_with_n_coeffs_mod3(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Array.multi([12])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>>()
external ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>
    stbir__horizontal_gather_2_channels_funcs;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_10_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_11_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_12_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_1_coeff(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_2_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_3_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_4_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_5_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_6_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_7_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_8_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_9_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Array.multi([4])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>>()
external ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>
    stbir__horizontal_gather_2_channels_with_n_coeffs_funcs;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_n_coeffs_mod0(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_n_coeffs_mod1(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_n_coeffs_mod2(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_2_channels_with_n_coeffs_mod3(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Array.multi([12])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>>()
external ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>
    stbir__horizontal_gather_3_channels_funcs;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_10_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_11_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_12_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_1_coeff(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_2_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_3_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_4_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_5_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_6_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_7_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_8_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_9_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Array.multi([4])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>>()
external ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>
    stbir__horizontal_gather_3_channels_with_n_coeffs_funcs;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_n_coeffs_mod0(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_n_coeffs_mod1(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_n_coeffs_mod2(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_3_channels_with_n_coeffs_mod3(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Array.multi([12])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>>()
external ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>
    stbir__horizontal_gather_4_channels_funcs;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_10_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_11_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_12_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_1_coeff(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_2_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_3_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_4_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_5_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_6_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_7_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_8_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_9_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Array.multi([4])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>>()
external ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>
    stbir__horizontal_gather_4_channels_with_n_coeffs_funcs;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_n_coeffs_mod0(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_n_coeffs_mod1(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_n_coeffs_mod2(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_4_channels_with_n_coeffs_mod3(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Array.multi([12])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>>()
external ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>
    stbir__horizontal_gather_7_channels_funcs;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_10_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_11_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_12_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_1_coeff(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_2_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_3_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_4_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_5_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_6_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_7_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_8_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_9_coeffs(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Array.multi([4])
@ffi.Native<ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>>()
external ffi.Array<ffi.Pointer<stbir__horizontal_gather_channels_func>>
    stbir__horizontal_gather_7_channels_with_n_coeffs_funcs;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_n_coeffs_mod0(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_n_coeffs_mod1(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_n_coeffs_mod2(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Float>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>,
        ffi.Int)>()
external void stbir__horizontal_gather_7_channels_with_n_coeffs_mod3(
  ffi.Pointer<ffi.Float> output_buffer,
  int output_sub_size,
  ffi.Pointer<ffi.Float> decode_buffer,
  ffi.Pointer<stbir__contributors> horizontal_contributors,
  ffi.Pointer<ffi.Float> horizontal_coefficients,
  int coefficient_width,
);

@ffi.Array.multi([8])
@ffi.Native<
    ffi
    .Array<ffi.Pointer<ffi.Pointer<stbir__horizontal_gather_channels_func>>>>()
external ffi
    .Array<ffi.Pointer<ffi.Pointer<stbir__horizontal_gather_channels_func>>>
    stbir__horizontal_gather_channels_funcs;

@ffi.Array.multi([8])
@ffi.Native<
    ffi
    .Array<ffi.Pointer<ffi.Pointer<stbir__horizontal_gather_channels_func>>>>()
external ffi
    .Array<ffi.Pointer<ffi.Pointer<stbir__horizontal_gather_channels_func>>>
    stbir__horizontal_gather_n_coeffs_funcs;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<stbir__info>, ffi.Pointer<stbir__per_split_info>)>()
external void stbir__horizontal_resample_and_encode_first_scanline_from_scatter(
  ffi.Pointer<stbir__info> stbir_info,
  ffi.Pointer<stbir__per_split_info> split_info,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<STBIR_RESIZE>, ffi.UnsignedInt,
        ffi.UnsignedInt)>(symbol: 'stbir__init_and_set_layout')
external void _stbir__init_and_set_layout(
  ffi.Pointer<STBIR_RESIZE> resize,
  int pixel_layout,
  int data_type,
);

void stbir__init_and_set_layout(
  ffi.Pointer<STBIR_RESIZE> resize,
  StbirPixelLayout pixel_layout,
  StbirDataType data_type,
) =>
    _stbir__init_and_set_layout(
      resize,
      pixel_layout.value,
      data_type.value,
    );

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbir__contributors>, ffi.Pointer<ffi.Float>,
        ffi.Int, ffi.Float, ffi.Int)>()
external void stbir__insert_coeff(
  ffi.Pointer<stbir__contributors> contribs,
  ffi.Pointer<ffi.Float> coeffs,
  int new_pixel,
  double new_coeff,
  int max_width,
);

@ffi.Native<
    ffi.Int Function(ffi.Int, ffi.Pointer<stbir__contributors>,
        ffi.Pointer<ffi.Float>, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>()
external int stbir__pack_coefficients(
  int num_contributors,
  ffi.Pointer<stbir__contributors> contributors,
  ffi.Pointer<ffi.Float> coefficents,
  int coefficient_width,
  int widest,
  int row0,
  int row1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<STBIR_RESIZE>, ffi.Int)>()
external int stbir__perform_build(
  ffi.Pointer<STBIR_RESIZE> resize,
  int splits,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<stbir__info>, ffi.Int, ffi.Int)>()
external int stbir__perform_resize(
  ffi.Pointer<stbir__info> info,
  int split_start,
  int split_count,
);

/// layout lookups - must match stbir_internal_pixel_layout
@ffi.Array.multi([17])
@ffi.Native<ffi.Array<ffi.UnsignedChar>>()
external ffi.Array<ffi.UnsignedChar> stbir__pixel_channels;

/// the internal pixel layout enums are in a different order, so we can easily do range comparisons of types
/// the public pixel layout is ordered in a way that if you cast num_channels (1-4) to the enum, you get something sensible
@ffi.Array.multi([17])
@ffi.Native<ffi.Array<ffi.UnsignedInt>>()
external ffi.Array<ffi.UnsignedInt>
    stbir__pixel_layout_convert_public_to_internal;

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbir__info>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__resample_horizontal_gather(
  ffi.Pointer<stbir__info> stbir_info,
  ffi.Pointer<ffi.Float> output_buffer,
  ffi.Pointer<ffi.Float> input_buffer,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<stbir__info>,
        ffi.Pointer<stbir__per_split_info>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<ffi.Float>)>()
external void stbir__resample_vertical_gather(
  ffi.Pointer<stbir__info> stbir_info,
  ffi.Pointer<stbir__per_split_info> split_info,
  int n,
  int contrib_n0,
  int contrib_n1,
  ffi.Pointer<ffi.Float> vertical_coefficients,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<stbir__info>,
        ffi.Pointer<stbir__per_split_info>,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__resample_vertical_scatter(
  ffi.Pointer<stbir__info> stbir_info,
  ffi.Pointer<stbir__per_split_info> split_info,
  int n0,
  int n1,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> vertical_buffer,
  ffi.Pointer<ffi.Float> vertical_buffer_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<stbir__sampler>,
        ffi.UnsignedInt,
        ffi.Pointer<stbir__kernel_callback>,
        ffi.Pointer<stbir__support_callback>,
        ffi.UnsignedInt,
        ffi.Pointer<stbir__scale_info>,
        ffi.Int,
        ffi.Pointer<ffi.Void>)>(symbol: 'stbir__set_sampler')
external void _stbir__set_sampler(
  ffi.Pointer<stbir__sampler> samp,
  int filter,
  ffi.Pointer<stbir__kernel_callback> kernel,
  ffi.Pointer<stbir__support_callback> support,
  int edge,
  ffi.Pointer<stbir__scale_info> scale_info,
  int always_gather,
  ffi.Pointer<ffi.Void> user_data,
);

void stbir__set_sampler(
  ffi.Pointer<stbir__sampler> samp,
  StbirFilter filter,
  ffi.Pointer<stbir__kernel_callback> kernel,
  ffi.Pointer<stbir__support_callback> support,
  StbirEdge edge,
  ffi.Pointer<stbir__scale_info> scale_info,
  int always_gather,
  ffi.Pointer<ffi.Void> user_data,
) =>
    _stbir__set_sampler(
      samp,
      filter.value,
      kernel,
      support,
      edge.value,
      scale_info,
      always_gather,
      user_data,
    );

/// Figure out whether to scale along the horizontal or vertical first.
/// This only *super* important when you are scaling by a massively
/// different amount in the vertical vs the horizontal (for example, if
/// you are scaling by 2x in the width, and 0.5x in the height, then you
/// want to do the vertical scale first, because it's around 3x faster
/// in that order.
///
/// In more normal circumstances, this makes a 20-40% differences, so
/// it's good to get right, but not critical. The normal way that you
/// decide which direction goes first is just figuring out which
/// direction does more multiplies. But with modern CPUs with their
/// fancy caches and SIMD and high IPC abilities, so there's just a lot
/// more that goes into it.
///
/// My handwavy sort of solution is to have an app that does a whole
/// bunch of timing for both vertical and horizontal first modes,
/// and then another app that can read lots of these timing files
/// and try to search for the best weights to use. Dotimings.c
/// is the app that does a bunch of timings, and vf_train.c is the
/// app that solves for the best weights (and shows how well it
/// does currently).
@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Int,
        ffi.Float,
        ffi.Int,
        ffi.Int,
        ffi.Float,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<STBIR__V_FIRST_INFO>)>()
external int stbir__should_do_vertical_first(
  ffi.Pointer<ffi.Pointer<ffi.Float>> weights_table,
  int horizontal_filter_pixel_width,
  double horizontal_scale,
  int horizontal_output_size,
  int vertical_filter_pixel_width,
  double vertical_scale,
  int vertical_output_size,
  int is_gather,
  ffi.Pointer<STBIR__V_FIRST_INFO> info,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)>()
external void stbir__simple_alpha_unweight_2ch(
  ffi.Pointer<ffi.Float> encode_buffer,
  int width_times_channels,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)>()
external void stbir__simple_alpha_unweight_4ch(
  ffi.Pointer<ffi.Float> encode_buffer,
  int width_times_channels,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)>()
external void stbir__simple_alpha_weight_2ch(
  ffi.Pointer<ffi.Float> decode_buffer,
  int width_times_channels,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)>()
external void stbir__simple_alpha_weight_4ch(
  ffi.Pointer<ffi.Float> decode_buffer,
  int width_times_channels,
);

/// only used in RGB->BGR or BGR->RGB
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)>()
external void stbir__simple_flip_3ch(
  ffi.Pointer<ffi.Float> decode_buffer,
  int width_times_channels,
);

@ffi.Array.multi([256])
@ffi.Native<ffi.Array<ffi.Float>>()
external ffi.Array<ffi.Float> stbir__srgb_uchar_to_linear_float;

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Void>)>()
external double stbir__support_one(
  double s,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Void>)>()
external double stbir__support_trapezoid(
  double scale,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Void>)>()
external double stbir__support_two(
  double s,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Void>)>()
external double stbir__support_zeropoint5(
  double s,
  ffi.Pointer<ffi.Void> user_data,
);

/// must match stbir_datatype
@ffi.Array.multi([6])
@ffi.Native<ffi.Array<ffi.UnsignedChar>>()
external ffi.Array<ffi.UnsignedChar> stbir__type_size;

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbir__info>, ffi.Pointer<STBIR_RESIZE>)>()
external void stbir__update_info_from_resize(
  ffi.Pointer<stbir__info> info,
  ffi.Pointer<STBIR_RESIZE> resize,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbir__info>,
        ffi.Pointer<stbir__per_split_info>, ffi.Int)>()
external void stbir__vertical_gather_loop(
  ffi.Pointer<stbir__info> stbir_info,
  ffi.Pointer<stbir__per_split_info> split_info,
  int split_count,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_1_coeffs(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_1_coeffs_cont(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_2_coeffs(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_2_coeffs_cont(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_3_coeffs(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_3_coeffs_cont(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_4_coeffs(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_4_coeffs_cont(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_5_coeffs(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_5_coeffs_cont(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_6_coeffs(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_6_coeffs_cont(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_7_coeffs(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_7_coeffs_cont(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_8_coeffs(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Pointer<ffi.Float>>, ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_gather_with_8_coeffs_cont(
  ffi.Pointer<ffi.Float> outputp,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
  ffi.Pointer<ffi.Float> input0_end,
);

@ffi.Array.multi([8])
@ffi.Native<ffi.Array<ffi.Pointer<STBIR_VERTICAL_GATHERFUNC>>>()
external ffi.Array<ffi.Pointer<STBIR_VERTICAL_GATHERFUNC>>
    stbir__vertical_gathers;

@ffi.Array.multi([8])
@ffi.Native<ffi.Array<ffi.Pointer<STBIR_VERTICAL_GATHERFUNC>>>()
external ffi.Array<ffi.Pointer<STBIR_VERTICAL_GATHERFUNC>>
    stbir__vertical_gathers_continues;

@ffi.Array.multi([8])
@ffi.Native<ffi.Array<ffi.Pointer<STBIR_VERTICAL_SCATTERFUNC>>>()
external ffi.Array<ffi.Pointer<STBIR_VERTICAL_SCATTERFUNC>>
    stbir__vertical_scatter_blends;

@ffi.Native<
    ffi.Void Function(ffi.Pointer<stbir__info>,
        ffi.Pointer<stbir__per_split_info>, ffi.Int)>()
external void stbir__vertical_scatter_loop(
  ffi.Pointer<stbir__info> stbir_info,
  ffi.Pointer<stbir__per_split_info> split_info,
  int split_count,
);

@ffi.Array.multi([8])
@ffi.Native<ffi.Array<ffi.Pointer<STBIR_VERTICAL_SCATTERFUNC>>>()
external ffi.Array<ffi.Pointer<STBIR_VERTICAL_SCATTERFUNC>>
    stbir__vertical_scatter_sets;

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_1_coeffs(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_1_coeffs_cont(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_2_coeffs(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_2_coeffs_cont(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_3_coeffs(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_3_coeffs_cont(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_4_coeffs(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_4_coeffs_cont(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_5_coeffs(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_5_coeffs_cont(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_6_coeffs(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_6_coeffs_cont(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_7_coeffs(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_7_coeffs_cont(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_8_coeffs(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>)>()
external void stbir__vertical_scatter_with_8_coeffs_cont(
  ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ffi.Pointer<ffi.Float> vertical_coefficients,
  ffi.Pointer<ffi.Float> input,
  ffi.Pointer<ffi.Float> input_end,
);

/// This builds the samplers and does one allocation
@ffi.Native<ffi.Int Function(ffi.Pointer<STBIR_RESIZE>)>()
external int stbir_build_samplers(
  ffi.Pointer<STBIR_RESIZE> resize,
);

/// This will build samplers for threading.
/// You can pass in the number of threads you'd like to use (try_splits).
/// It returns the number of splits (threads) that you can call it with.
/// It might be less if the image resize can't be split up that many ways.
@ffi.Native<ffi.Int Function(ffi.Pointer<STBIR_RESIZE>, ffi.Int)>()
external int stbir_build_samplers_with_splits(
  ffi.Pointer<STBIR_RESIZE> resize,
  int try_splits,
);

/// You MUST call this, if you call stbir_build_samplers or stbir_build_samplers_with_splits
@ffi.Native<ffi.Void Function(ffi.Pointer<STBIR_RESIZE>)>()
external void stbir_free_samplers(
  ffi.Pointer<STBIR_RESIZE> resize,
);

/// memcpy that is specically intentionally overlapping (src is smaller then dest, so can be
/// a normal forward copy, bytes is divisible by 4 and bytes is greater than or equal to
/// the diff between dest and src)
@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>()
external void stbir_overlapping_memcpy(
  ffi.Pointer<ffi.Void> dest,
  ffi.Pointer<ffi.Void> src,
  int bytes,
);

/// medium api
@ffi.Native<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<ffi.Void>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.UnsignedInt,
        ffi.UnsignedInt,
        ffi.UnsignedInt,
        ffi.UnsignedInt)>(symbol: 'stbir_resize')
external ffi.Pointer<ffi.Void> _stbir_resize(
  ffi.Pointer<ffi.Void> input_pixels,
  int input_w,
  int input_h,
  int input_stride_in_bytes,
  ffi.Pointer<ffi.Void> output_pixels,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  int pixel_layout,
  int data_type,
  int edge,
  int filter,
);

ffi.Pointer<ffi.Void> stbir_resize(
  ffi.Pointer<ffi.Void> input_pixels,
  int input_w,
  int input_h,
  int input_stride_in_bytes,
  ffi.Pointer<ffi.Void> output_pixels,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  StbirPixelLayout pixel_layout,
  StbirDataType data_type,
  StbirEdge edge,
  StbirFilter filter,
) =>
    _stbir_resize(
      input_pixels,
      input_w,
      input_h,
      input_stride_in_bytes,
      output_pixels,
      output_w,
      output_h,
      output_stride_in_bytes,
      pixel_layout.value,
      data_type.value,
      edge.value,
      filter.value,
    );

/// And this is the main function to perform the resize synchronously on one thread.
@ffi.Native<ffi.Int Function(ffi.Pointer<STBIR_RESIZE>)>()
external int stbir_resize_extended(
  ffi.Pointer<STBIR_RESIZE> resize,
);

/// Usually, you will always call stbir_resize_split with split_start as the thread_index
/// and "1" for the split_count.
/// But, if you have a weird situation where you MIGHT want 8 threads, but sometimes
/// only 4 threads, you can use 0,2,4,6 for the split_start's and use "2" for the
/// split_count each time to turn in into a 4 thread resize. (This is unusual).
@ffi.Native<ffi.Int Function(ffi.Pointer<STBIR_RESIZE>, ffi.Int, ffi.Int)>()
external int stbir_resize_extended_split(
  ffi.Pointer<STBIR_RESIZE> resize,
  int split_start,
  int split_count,
);

@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<ffi.Float>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<ffi.Float>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.UnsignedInt)>(symbol: 'stbir_resize_float_linear')
external ffi.Pointer<ffi.Float> _stbir_resize_float_linear(
  ffi.Pointer<ffi.Float> input_pixels,
  int input_w,
  int input_h,
  int input_stride_in_bytes,
  ffi.Pointer<ffi.Float> output_pixels,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  int pixel_type,
);

ffi.Pointer<ffi.Float> stbir_resize_float_linear(
  ffi.Pointer<ffi.Float> input_pixels,
  int input_w,
  int input_h,
  int input_stride_in_bytes,
  ffi.Pointer<ffi.Float> output_pixels,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  StbirPixelLayout pixel_type,
) =>
    _stbir_resize_float_linear(
      input_pixels,
      input_w,
      input_h,
      input_stride_in_bytes,
      output_pixels,
      output_w,
      output_h,
      output_stride_in_bytes,
      pixel_type.value,
    );

/// First off, you must ALWAYS call stbir_resize_init on your resize structure before any of the other calls!
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<STBIR_RESIZE>,
        ffi.Pointer<ffi.Void>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<ffi.Void>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.UnsignedInt,
        ffi.UnsignedInt)>(symbol: 'stbir_resize_init')
external void _stbir_resize_init(
  ffi.Pointer<STBIR_RESIZE> resize,
  ffi.Pointer<ffi.Void> input_pixels,
  int input_w,
  int input_h,
  int input_stride_in_bytes,
  ffi.Pointer<ffi.Void> output_pixels,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  int pixel_layout,
  int data_type,
);

void stbir_resize_init(
  ffi.Pointer<STBIR_RESIZE> resize,
  ffi.Pointer<ffi.Void> input_pixels,
  int input_w,
  int input_h,
  int input_stride_in_bytes,
  ffi.Pointer<ffi.Void> output_pixels,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  StbirPixelLayout pixel_layout,
  StbirDataType data_type,
) =>
    _stbir_resize_init(
      resize,
      input_pixels,
      input_w,
      input_h,
      input_stride_in_bytes,
      output_pixels,
      output_w,
      output_h,
      output_stride_in_bytes,
      pixel_layout.value,
      data_type.value,
    );

@ffi.Native<
    ffi.Pointer<ffi.UnsignedChar> Function(
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.UnsignedInt)>(symbol: 'stbir_resize_uint8_linear')
external ffi.Pointer<ffi.UnsignedChar> _stbir_resize_uint8_linear(
  ffi.Pointer<ffi.UnsignedChar> input_pixels,
  int input_w,
  int input_h,
  int input_stride_in_bytes,
  ffi.Pointer<ffi.UnsignedChar> output_pixels,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  int pixel_type,
);

ffi.Pointer<ffi.UnsignedChar> stbir_resize_uint8_linear(
  ffi.Pointer<ffi.UnsignedChar> input_pixels,
  int input_w,
  int input_h,
  int input_stride_in_bytes,
  ffi.Pointer<ffi.UnsignedChar> output_pixels,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  StbirPixelLayout pixel_type,
) =>
    _stbir_resize_uint8_linear(
      input_pixels,
      input_w,
      input_h,
      input_stride_in_bytes,
      output_pixels,
      output_w,
      output_h,
      output_stride_in_bytes,
      pixel_type.value,
    );

/// ===============================================================
/// Simple-complexity API
///
/// If output_pixels is NULL (0), then we will allocate the buffer and return it to you.
/// --------------------------------
@ffi.Native<
    ffi.Pointer<ffi.UnsignedChar> Function(
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<ffi.UnsignedChar>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.UnsignedInt)>(symbol: 'stbir_resize_uint8_srgb')
external ffi.Pointer<ffi.UnsignedChar> _stbir_resize_uint8_srgb(
  ffi.Pointer<ffi.UnsignedChar> input_pixels,
  int input_w,
  int input_h,
  int input_stride_in_bytes,
  ffi.Pointer<ffi.UnsignedChar> output_pixels,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  int pixel_type,
);

ffi.Pointer<ffi.UnsignedChar> stbir_resize_uint8_srgb(
  ffi.Pointer<ffi.UnsignedChar> input_pixels,
  int input_w,
  int input_h,
  int input_stride_in_bytes,
  ffi.Pointer<ffi.UnsignedChar> output_pixels,
  int output_w,
  int output_h,
  int output_stride_in_bytes,
  StbirPixelLayout pixel_type,
) =>
    _stbir_resize_uint8_srgb(
      input_pixels,
      input_w,
      input_h,
      input_stride_in_bytes,
      output_pixels,
      output_w,
      output_h,
      output_stride_in_bytes,
      pixel_type.value,
    );

@ffi.Native<
    ffi.Void Function(ffi.Pointer<STBIR_RESIZE>, ffi.Pointer<ffi.Void>, ffi.Int,
        ffi.Pointer<ffi.Void>, ffi.Int)>()
external void stbir_set_buffer_ptrs(
  ffi.Pointer<STBIR_RESIZE> resize,
  ffi.Pointer<ffi.Void> input_pixels,
  int input_stride_in_bytes,
  ffi.Pointer<ffi.Void> output_pixels,
  int output_stride_in_bytes,
);

/// ===============================================================
/// You can update these parameters any time after resize_init and there is no cost
/// --------------------------------
@ffi.Native<
    ffi.Void Function(ffi.Pointer<STBIR_RESIZE>, ffi.UnsignedInt,
        ffi.UnsignedInt)>(symbol: 'stbir_set_datatypes')
external void _stbir_set_datatypes(
  ffi.Pointer<STBIR_RESIZE> resize,
  int input_type,
  int output_type,
);

void stbir_set_datatypes(
  ffi.Pointer<STBIR_RESIZE> resize,
  StbirDataType input_type,
  StbirDataType output_type,
) =>
    _stbir_set_datatypes(
      resize,
      input_type.value,
      output_type.value,
    );

@ffi.Native<
    ffi.Int Function(ffi.Pointer<STBIR_RESIZE>, ffi.UnsignedInt,
        ffi.UnsignedInt)>(symbol: 'stbir_set_edgemodes')
external int _stbir_set_edgemodes(
  ffi.Pointer<STBIR_RESIZE> resize,
  int horizontal_edge,
  int vertical_edge,
);

int stbir_set_edgemodes(
  ffi.Pointer<STBIR_RESIZE> resize,
  StbirEdge horizontal_edge,
  StbirEdge vertical_edge,
) =>
    _stbir_set_edgemodes(
      resize,
      horizontal_edge.value,
      vertical_edge.value,
    );

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<STBIR_RESIZE>,
        ffi.Pointer<stbir__kernel_callback>,
        ffi.Pointer<stbir__support_callback>,
        ffi.Pointer<stbir__kernel_callback>,
        ffi.Pointer<stbir__support_callback>)>()
external int stbir_set_filter_callbacks(
  ffi.Pointer<STBIR_RESIZE> resize,
  ffi.Pointer<stbir__kernel_callback> horizontal_filter,
  ffi.Pointer<stbir__support_callback> horizontal_support,
  ffi.Pointer<stbir__kernel_callback> vertical_filter,
  ffi.Pointer<stbir__support_callback> vertical_support,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<STBIR_RESIZE>, ffi.UnsignedInt,
        ffi.UnsignedInt)>(symbol: 'stbir_set_filters')
external int _stbir_set_filters(
  ffi.Pointer<STBIR_RESIZE> resize,
  int horizontal_filter,
  int vertical_filter,
);

int stbir_set_filters(
  ffi.Pointer<STBIR_RESIZE> resize,
  StbirFilter horizontal_filter,
  StbirFilter vertical_filter,
) =>
    _stbir_set_filters(
      resize,
      horizontal_filter.value,
      vertical_filter.value,
    );

@ffi.Native<
    ffi.Int Function(ffi.Pointer<STBIR_RESIZE>, ffi.Double, ffi.Double,
        ffi.Double, ffi.Double)>()
external int stbir_set_input_subrect(
  ffi.Pointer<STBIR_RESIZE> resize,
  double s0,
  double t0,
  double s1,
  double t1,
);

/// when inputting AND outputting non-premultiplied alpha pixels, we use a slower but higher quality technique
/// that fills the zero alpha pixel's RGB values with something plausible.  If you don't care about areas of
/// zero alpha, you can call this function to get about a 25% speed improvement for STBIR_RGBA to STBIR_RGBA
/// types of resizes.
@ffi.Native<ffi.Int Function(ffi.Pointer<STBIR_RESIZE>, ffi.Int)>()
external int stbir_set_non_pm_alpha_speed_over_quality(
  ffi.Pointer<STBIR_RESIZE> resize,
  int non_pma_alpha_speed_over_quality,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<STBIR_RESIZE>, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>()
external int stbir_set_output_pixel_subrect(
  ffi.Pointer<STBIR_RESIZE> resize,
  int subx,
  int suby,
  int subw,
  int subh,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<STBIR_RESIZE>,
        ffi.Pointer<stbir_input_callback>,
        ffi.Pointer<stbir_output_callback>)>()
external void stbir_set_pixel_callbacks(
  ffi.Pointer<STBIR_RESIZE> resize,
  ffi.Pointer<stbir_input_callback> input_cb,
  ffi.Pointer<stbir_output_callback> output_cb,
);

/// ===============================================================
/// If you call any of these functions, you will trigger a sampler rebuild!
/// --------------------------------
@ffi.Native<
    ffi.Int Function(ffi.Pointer<STBIR_RESIZE>, ffi.UnsignedInt,
        ffi.UnsignedInt)>(symbol: 'stbir_set_pixel_layouts')
external int _stbir_set_pixel_layouts(
  ffi.Pointer<STBIR_RESIZE> resize,
  int input_pixel_layout,
  int output_pixel_layout,
);

int stbir_set_pixel_layouts(
  ffi.Pointer<STBIR_RESIZE> resize,
  StbirPixelLayout input_pixel_layout,
  StbirPixelLayout output_pixel_layout,
) =>
    _stbir_set_pixel_layouts(
      resize,
      input_pixel_layout.value,
      output_pixel_layout.value,
    );

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<STBIR_RESIZE>, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>()
external int stbir_set_pixel_subrect(
  ffi.Pointer<STBIR_RESIZE> resize,
  int subx,
  int suby,
  int subw,
  int subh,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<STBIR_RESIZE>, ffi.Pointer<ffi.Void>)>()
external void stbir_set_user_data(
  ffi.Pointer<STBIR_RESIZE> resize,
  ffi.Pointer<ffi.Void> user_data,
);

/// override normal use of memcpy with much simpler copy (faster and smaller with our sized copies)
@ffi.Native<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>()
external void stbir_simd_memcpy(
  ffi.Pointer<ffi.Void> dest,
  ffi.Pointer<ffi.Void> src,
  int bytes,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<stbi__jpeg>, ffi.Int, ffi.Int)>>
      get stbi__free_jpeg_components =>
          ffi.Native.addressOf(self.stbi__free_jpeg_components);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get stbi_image_free => ffi.Native.addressOf(self.stbi_image_free);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<stbir__info>)>>
      get stbir__free_internal_mem =>
          ffi.Native.addressOf(self.stbir__free_internal_mem);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<STBIR_RESIZE>)>>
      get stbir_free_samplers => ffi.Native.addressOf(self.stbir_free_samplers);
}

const int FAST_BITS = 9;

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
typedef FILE = __sFILE;

const int STBIR_1CHANNEL = 1;

const int STBIR_2CHANNEL = 2;

const int STBIR_4CHANNEL = 5;

const int STBIR_ABGR = 8;

const int STBIR_ABGR_PM = 14;

const int STBIR_AR = 10;

const int STBIR_ARGB = 7;

const int STBIR_ARGB_PM = 13;

const int STBIR_AR_PM = 16;

const int STBIR_BGR = 0;

const int STBIR_BGRA = 6;

const int STBIR_BGRA_PM = 12;

const int STBIR_DEFAULT_FILTER_DOWNSAMPLE = 5;

const int STBIR_DEFAULT_FILTER_UPSAMPLE = 4;

const int STBIR_FORCE_GATHER_FILTER_SCANLINES_AMOUNT = 32;

const int STBIR_FORCE_MINIMUM_SCANLINES_FOR_SPLITS = 4;

const int STBIR_INPUT_CALLBACK_PADDING = 3;

const int STBIR_RA = 9;

const int STBIR_RA_PM = 15;

final class STBIR_RESIZE extends ffi.Struct {
  external ffi.Pointer<ffi.Void> user_data;

  external ffi.Pointer<ffi.Void> input_pixels;

  @ffi.Int()
  external int input_w;

  @ffi.Int()
  external int input_h;

  @ffi.Double()
  external double input_s0;

  @ffi.Double()
  external double input_t0;

  @ffi.Double()
  external double input_s1;

  @ffi.Double()
  external double input_t1;

  external ffi.Pointer<stbir_input_callback> input_cb;

  external ffi.Pointer<ffi.Void> output_pixels;

  @ffi.Int()
  external int output_w;

  @ffi.Int()
  external int output_h;

  @ffi.Int()
  external int output_subx;

  @ffi.Int()
  external int output_suby;

  @ffi.Int()
  external int output_subw;

  @ffi.Int()
  external int output_subh;

  external ffi.Pointer<stbir_output_callback> output_cb;

  @ffi.Int()
  external int input_stride_in_bytes;

  @ffi.Int()
  external int output_stride_in_bytes;

  @ffi.Int()
  external int splits;

  @ffi.Int()
  external int fast_alpha;

  @ffi.Int()
  external int needs_rebuild;

  @ffi.Int()
  external int called_alloc;

  @ffi.UnsignedInt()
  external int input_pixel_layout_publicAsInt;

  StbirPixelLayout get input_pixel_layout_public =>
      StbirPixelLayout.fromValue(input_pixel_layout_publicAsInt);

  @ffi.UnsignedInt()
  external int output_pixel_layout_publicAsInt;

  StbirPixelLayout get output_pixel_layout_public =>
      StbirPixelLayout.fromValue(output_pixel_layout_publicAsInt);

  @ffi.UnsignedInt()
  external int input_data_typeAsInt;

  StbirDataType get input_data_type =>
      StbirDataType.fromValue(input_data_typeAsInt);

  @ffi.UnsignedInt()
  external int output_data_typeAsInt;

  StbirDataType get output_data_type =>
      StbirDataType.fromValue(output_data_typeAsInt);

  @ffi.UnsignedInt()
  external int horizontal_filterAsInt;

  StbirFilter get horizontal_filter =>
      StbirFilter.fromValue(horizontal_filterAsInt);

  @ffi.UnsignedInt()
  external int vertical_filterAsInt;

  StbirFilter get vertical_filter =>
      StbirFilter.fromValue(vertical_filterAsInt);

  @ffi.UnsignedInt()
  external int horizontal_edgeAsInt;

  StbirEdge get horizontal_edge => StbirEdge.fromValue(horizontal_edgeAsInt);

  @ffi.UnsignedInt()
  external int vertical_edgeAsInt;

  StbirEdge get vertical_edge => StbirEdge.fromValue(vertical_edgeAsInt);

  external ffi.Pointer<stbir__kernel_callback> horizontal_filter_kernel;

  external ffi.Pointer<stbir__support_callback> horizontal_filter_support;

  external ffi.Pointer<stbir__kernel_callback> vertical_filter_kernel;

  external ffi.Pointer<stbir__support_callback> vertical_filter_support;

  external ffi.Pointer<stbir__info> samplers;
}

const int STBIR_RESIZE_CLASSIFICATIONS = 8;

const int STBIR_RGB = 3;

const int STBIR_RGBA = 4;

const int STBIR_RGBA_PM = 11;

typedef STBIR_VERTICAL_GATHERFUNC = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Float> output,
        ffi.Pointer<ffi.Float> coeffs,
        ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
        ffi.Pointer<ffi.Float> input0_end)>;
typedef STBIR_VERTICAL_SCATTERFUNC = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
        ffi.Pointer<ffi.Float> coeffs,
        ffi.Pointer<ffi.Float> input,
        ffi.Pointer<ffi.Float> input_end)>;

const double STBIR__FLOAT_EMPTY_MARKER = 3.0000000054977558e+38;

const String STBIR__HEADER_FILENAME = 'stb_image_resize2.h';

const int STBIR__MERGE_RUNS_PIXEL_THRESHOLD = 16;

/// structure that allow us to query and override info for training the costs
final class STBIR__V_FIRST_INFO extends ffi.Struct {
  @ffi.Double()
  external double v_cost;

  @ffi.Double()
  external double h_cost;

  /// 0 = no control, 1 = force hori, 2 = force vert
  @ffi.Int()
  external int control_v_first;

  @ffi.Int()
  external int v_first;

  @ffi.Int()
  external int v_resize_classification;

  @ffi.Int()
  external int is_gather;
}

const int STBIR__V_FIRST_INFO_POINTER = 0;

const int STBI_MAX_DIMENSIONS = 16777216;

const int STBI_ORDER_BGR = 1;

const int STBI_ORDER_RGB = 0;

const int STBI_VERSION = 1;

const int STBI__F_avg = 3;

const int STBI__F_avg_first = 5;

const int STBI__F_none = 0;

const int STBI__F_paeth = 4;

const int STBI__F_sub = 1;

const int STBI__F_up = 2;

const int STBI__HDR_BUFLEN = 1024;

const int STBI__MARKER_none = 255;

const int STBI__SCAN_header = 2;

const int STBI__SCAN_load = 0;

const int STBI__SCAN_type = 1;

const int STBI__ZFAST_BITS = 9;

const int STBI__ZFAST_MASK = 511;

const int STBI__ZNSYMS = 288;

const int STBI_default = 0;

const int STBI_default$1 = 0;

const int STBI_grey = 1;

const int STBI_grey$1 = 1;

const int STBI_grey_alpha = 2;

const int STBI_grey_alpha$1 = 2;

const int STBI_rgb = 3;

const int STBI_rgb$1 = 3;

const int STBI_rgb_alpha = 4;

const int STBI_rgb_alpha$1 = 4;

enum StbirDataType {
  STBIR_TYPE_UINT8(0),
  STBIR_TYPE_UINT8_SRGB(1),

  /// alpha channel, when present, should also be SRGB (this is very unusual)
  STBIR_TYPE_UINT8_SRGB_ALPHA(2),
  STBIR_TYPE_UINT16(3),
  STBIR_TYPE_FLOAT(4),
  STBIR_TYPE_HALF_FLOAT(5);

  final int value;
  const StbirDataType(this.value);

  static StbirDataType fromValue(int value) => switch (value) {
        0 => STBIR_TYPE_UINT8,
        1 => STBIR_TYPE_UINT8_SRGB,
        2 => STBIR_TYPE_UINT8_SRGB_ALPHA,
        3 => STBIR_TYPE_UINT16,
        4 => STBIR_TYPE_FLOAT,
        5 => STBIR_TYPE_HALF_FLOAT,
        _ => throw ArgumentError('Unknown value for StbirDataType: $value'),
      };
}

/// ===============================================================
/// Medium-complexity API
///
/// This extends the easy-to-use API as follows:
///
/// * Can specify the datatype - U8, U8_SRGB, U16, FLOAT, HALF_FLOAT
/// * Edge wrap can selected explicitly
/// * Filter can be selected explicitly
/// --------------------------------
enum StbirEdge {
  STBIR_EDGE_CLAMP(0),
  STBIR_EDGE_REFLECT(1),

  /// this edge mode is slower and uses more memory
  STBIR_EDGE_WRAP(2),
  STBIR_EDGE_ZERO(3);

  final int value;
  const StbirEdge(this.value);

  static StbirEdge fromValue(int value) => switch (value) {
        0 => STBIR_EDGE_CLAMP,
        1 => STBIR_EDGE_REFLECT,
        2 => STBIR_EDGE_WRAP,
        3 => STBIR_EDGE_ZERO,
        _ => throw ArgumentError('Unknown value for StbirEdge: $value'),
      };
}

enum StbirFilter {
  /// use same filter type that easy-to-use API chooses
  STBIR_FILTER_DEFAULT(0),

  /// A trapezoid w/1-pixel wide ramps, same result as box for integer scale ratios
  STBIR_FILTER_BOX(1),

  /// On upsampling, produces same results as bilinear texture filtering
  STBIR_FILTER_TRIANGLE(2),

  /// The cubic b-spline (aka Mitchell-Netrevalli with B=1,C=0), gaussian-esque
  STBIR_FILTER_CUBICBSPLINE(3),

  /// An interpolating cubic spline
  STBIR_FILTER_CATMULLROM(4),

  /// Mitchell-Netrevalli filter with B=1/3, C=1/3
  STBIR_FILTER_MITCHELL(5),

  /// Simple point sampling
  STBIR_FILTER_POINT_SAMPLE(6),

  /// User callback specified
  STBIR_FILTER_OTHER(7);

  final int value;
  const StbirFilter(this.value);

  static StbirFilter fromValue(int value) => switch (value) {
        0 => STBIR_FILTER_DEFAULT,
        1 => STBIR_FILTER_BOX,
        2 => STBIR_FILTER_TRIANGLE,
        3 => STBIR_FILTER_CUBICBSPLINE,
        4 => STBIR_FILTER_CATMULLROM,
        5 => STBIR_FILTER_MITCHELL,
        6 => STBIR_FILTER_POINT_SAMPLE,
        7 => STBIR_FILTER_OTHER,
        _ => throw ArgumentError('Unknown value for StbirFilter: $value'),
      };
}

/// stbir_pixel_layout specifies:
/// number of channels
/// order of channels
/// whether color is premultiplied by alpha
/// for back compatibility, you can cast the old channel count to an stbir_pixel_layout
enum StbirPixelLayout {
  STBIR_1CHANNEL(1),
  STBIR_2CHANNEL(2),

  /// 3-chan, with order specified (for channel flipping)
  STBIR_RGB(3),

  /// 3-chan, with order specified (for channel flipping)
  STBIR_BGR(0),
  STBIR_4CHANNEL(5),

  /// alpha formats, where alpha is NOT premultiplied into color channels
  STBIR_RGBA(4),
  STBIR_BGRA(6),
  STBIR_ARGB(7),
  STBIR_ABGR(8),
  STBIR_RA(9),
  STBIR_AR(10),

  /// alpha formats, where alpha is premultiplied into color channels
  STBIR_RGBA_PM(11),
  STBIR_BGRA_PM(12),
  STBIR_ARGB_PM(13),
  STBIR_ABGR_PM(14),
  STBIR_RA_PM(15),
  STBIR_AR_PM(16);

  /// alpha formats, where NO alpha weighting is applied at all!
  static const STBIR_RGBA_NO_AW = STBIR_RGBA_PM;

  /// these are just synonyms for the _PM flags (which also do
  static const STBIR_BGRA_NO_AW = STBIR_BGRA_PM;

  /// no alpha weighting). These names just make it more clear
  static const STBIR_ARGB_NO_AW = STBIR_ARGB_PM;

  /// for some folks).
  static const STBIR_ABGR_NO_AW = STBIR_ABGR_PM;
  static const STBIR_RA_NO_AW = STBIR_RA_PM;
  static const STBIR_AR_NO_AW = STBIR_AR_PM;

  final int value;
  const StbirPixelLayout(this.value);

  static StbirPixelLayout fromValue(int value) => switch (value) {
        1 => STBIR_1CHANNEL,
        2 => STBIR_2CHANNEL,
        3 => STBIR_RGB,
        0 => STBIR_BGR,
        5 => STBIR_4CHANNEL,
        4 => STBIR_RGBA,
        6 => STBIR_BGRA,
        7 => STBIR_ARGB,
        8 => STBIR_ABGR,
        9 => STBIR_RA,
        10 => STBIR_AR,
        11 => STBIR_RGBA_PM,
        12 => STBIR_BGRA_PM,
        13 => STBIR_ARGB_PM,
        14 => STBIR_ABGR_PM,
        15 => STBIR_RA_PM,
        16 => STBIR_AR_PM,
        _ => throw ArgumentError('Unknown value for StbirPixelLayout: $value'),
      };

  @override
  String toString() {
    if (this == STBIR_RGBA_PM)
      return "StbirPixelLayout.STBIR_RGBA_PM, StbirPixelLayout.STBIR_RGBA_NO_AW";
    if (this == STBIR_BGRA_PM)
      return "StbirPixelLayout.STBIR_BGRA_PM, StbirPixelLayout.STBIR_BGRA_NO_AW";
    if (this == STBIR_ARGB_PM)
      return "StbirPixelLayout.STBIR_ARGB_PM, StbirPixelLayout.STBIR_ARGB_NO_AW";
    if (this == STBIR_ABGR_PM)
      return "StbirPixelLayout.STBIR_ABGR_PM, StbirPixelLayout.STBIR_ABGR_NO_AW";
    if (this == STBIR_RA_PM)
      return "StbirPixelLayout.STBIR_RA_PM, StbirPixelLayout.STBIR_RA_NO_AW";
    if (this == STBIR_AR_PM)
      return "StbirPixelLayout.STBIR_AR_PM, StbirPixelLayout.STBIR_AR_NO_AW";
    return super.toString();
  }
}

/// definition of jpeg image component
final class UnnamedStruct1 extends ffi.Struct {
  @ffi.Int()
  external int id;

  @ffi.Int()
  external int h;

  @ffi.Int()
  external int v;

  @ffi.Int()
  external int tq;

  @ffi.Int()
  external int hd;

  @ffi.Int()
  external int ha;

  @ffi.Int()
  external int dc_pred;

  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int w2;

  @ffi.Int()
  external int h2;

  external ffi.Pointer<stbi_uc> data;

  external ffi.Pointer<ffi.Void> raw_data;

  external ffi.Pointer<ffi.Void> raw_coeff;

  external ffi.Pointer<stbi_uc> linebuf;

  /// progressive only
  external ffi.Pointer<ffi.Short> coeff;

  /// number of 8x8 coefficient blocks
  @ffi.Int()
  external int coeff_w;

  @ffi.Int()
  external int coeff_h;
}

typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
final class __sFILE extends ffi.Struct {
  /// current position in (some) buffer
  external ffi.Pointer<ffi.UnsignedChar> _p;

  /// read space left for getc()
  @ffi.Int()
  external int _r;

  /// write space left for putc()
  @ffi.Int()
  external int _w;

  /// flags, below; this FILE is free if 0
  @ffi.Short()
  external int _flags;

  /// fileno, if Unix descriptor, else -1
  @ffi.Short()
  external int _file;

  /// the buffer (at least 1 byte, if !NULL)
  external __sbuf _bf;

  /// 0 or -_bf._size, for inline putc
  @ffi.Int()
  external int _lbfsize;

  /// cookie passed to io functions
  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  /// ungetc buffer
  external __sbuf _ub;

  /// additions to FILE to not break ABI
  external ffi.Pointer<__sFILEX> _extra;

  /// saved _r when _r is counting ungetc data
  @ffi.Int()
  external int _ur;

  /// guarantee an ungetc() buffer
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  /// guarantee a getc() buffer
  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  /// buffer for fgetln()
  external __sbuf _lb;

  /// stat.st_blksize (may be != _bf._size)
  @ffi.Int()
  external int _blksize;

  /// current lseek offset (see WARNING)
  @fpos_t()
  external int _offset;
}

/// hold a buncha junk that would grow the ABI
final class __sFILEX extends ffi.Opaque {}

/// stdio buffers
final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

typedef fpos_t = __darwin_off_t;

/// static jfif-centered resampling (across block boundaries)
typedef resample_row_func
    = ffi.Pointer<ffi.NativeFunction<resample_row_funcFunction>>;
typedef resample_row_funcFunction = ffi.Pointer<stbi_uc> Function(
    ffi.Pointer<stbi_uc> out,
    ffi.Pointer<stbi_uc> in0,
    ffi.Pointer<stbi_uc> in1,
    ffi.Int w,
    ffi.Int hs);
typedef Dartresample_row_funcFunction = ffi.Pointer<stbi_uc> Function(
    ffi.Pointer<stbi_uc> out,
    ffi.Pointer<stbi_uc> in0,
    ffi.Pointer<stbi_uc> in1,
    int w,
    int hs);

final class stbi__bmp_data extends ffi.Struct {
  @ffi.Int()
  external int bpp;

  @ffi.Int()
  external int offset;

  @ffi.Int()
  external int hsz;

  @ffi.UnsignedInt()
  external int mr;

  @ffi.UnsignedInt()
  external int mg;

  @ffi.UnsignedInt()
  external int mb;

  @ffi.UnsignedInt()
  external int ma;

  @ffi.UnsignedInt()
  external int all_a;

  @ffi.Int()
  external int extra_read;
}

/// stbi__context structure is our basic context used by all images, so it
/// contains all the IO context, plus some basic image information
final class stbi__context extends ffi.Struct {
  @stbi__uint32()
  external int img_x;

  @stbi__uint32()
  external int img_y;

  @ffi.Int()
  external int img_n;

  @ffi.Int()
  external int img_out_n;

  external stbi_io_callbacks io;

  external ffi.Pointer<ffi.Void> io_user_data;

  @ffi.Int()
  external int read_from_callbacks;

  @ffi.Int()
  external int buflen;

  @ffi.Array.multi([128])
  external ffi.Array<stbi_uc> buffer_start;

  @ffi.Int()
  external int callback_already_read;

  external ffi.Pointer<stbi_uc> img_buffer;

  external ffi.Pointer<stbi_uc> img_buffer_end;

  external ffi.Pointer<stbi_uc> img_buffer_original;

  external ffi.Pointer<stbi_uc> img_buffer_original_end;
}

final class stbi__gif extends ffi.Struct {
  @ffi.Int()
  external int w;

  @ffi.Int()
  external int h;

  /// output buffer (always 4 components)
  external ffi.Pointer<stbi_uc> out;

  /// The current "background" as far as a gif is concerned
  external ffi.Pointer<stbi_uc> background;

  external ffi.Pointer<stbi_uc> history;

  @ffi.Int()
  external int flags;

  @ffi.Int()
  external int bgindex;

  @ffi.Int()
  external int ratio;

  @ffi.Int()
  external int transparent;

  @ffi.Int()
  external int eflags;

  @ffi.Array.multi([256, 4])
  external ffi.Array<ffi.Array<stbi_uc>> pal;

  @ffi.Array.multi([256, 4])
  external ffi.Array<ffi.Array<stbi_uc>> lpal;

  @ffi.Array.multi([8192])
  external ffi.Array<stbi__gif_lzw> codes;

  external ffi.Pointer<stbi_uc> color_table;

  @ffi.Int()
  external int parse;

  @ffi.Int()
  external int step;

  @ffi.Int()
  external int lflags;

  @ffi.Int()
  external int start_x;

  @ffi.Int()
  external int start_y;

  @ffi.Int()
  external int max_x;

  @ffi.Int()
  external int max_y;

  @ffi.Int()
  external int cur_x;

  @ffi.Int()
  external int cur_y;

  @ffi.Int()
  external int line_size;

  @ffi.Int()
  external int delay;
}

final class stbi__gif_lzw extends ffi.Struct {
  @stbi__int16()
  external int prefix;

  @stbi_uc()
  external int first;

  @stbi_uc()
  external int suffix;
}

final class stbi__huffman extends ffi.Struct {
  @ffi.Array.multi([512])
  external ffi.Array<stbi_uc> fast;

  /// weirdly, repacking this into AoS is a 10% speed loss, instead of a win
  @ffi.Array.multi([256])
  external ffi.Array<stbi__uint16> code;

  @ffi.Array.multi([256])
  external ffi.Array<stbi_uc> values;

  @ffi.Array.multi([257])
  external ffi.Array<stbi_uc> size;

  @ffi.Array.multi([18])
  external ffi.Array<ffi.UnsignedInt> maxcode;

  /// old 'firstsymbol' - old 'firstcode'
  @ffi.Array.multi([17])
  external ffi.Array<ffi.Int> delta;
}

typedef stbi__int16 = ffi.Int16;
typedef Dartstbi__int16 = int;
typedef stbi__int32 = ffi.Int32;
typedef Dartstbi__int32 = int;

final class stbi__jpeg extends ffi.Struct {
  external ffi.Pointer<stbi__context> s;

  @ffi.Array.multi([4])
  external ffi.Array<stbi__huffman> huff_dc;

  @ffi.Array.multi([4])
  external ffi.Array<stbi__huffman> huff_ac;

  @ffi.Array.multi([4, 64])
  external ffi.Array<ffi.Array<stbi__uint16>> dequant;

  @ffi.Array.multi([4, 512])
  external ffi.Array<ffi.Array<stbi__int16>> fast_ac;

  /// sizes for components, interleaved MCUs
  @ffi.Int()
  external int img_h_max;

  @ffi.Int()
  external int img_v_max;

  @ffi.Int()
  external int img_mcu_x;

  @ffi.Int()
  external int img_mcu_y;

  @ffi.Int()
  external int img_mcu_w;

  @ffi.Int()
  external int img_mcu_h;

  @ffi.Array.multi([4])
  external ffi.Array<UnnamedStruct1> img_comp;

  /// jpeg entropy-coded buffer
  @stbi__uint32()
  external int code_buffer;

  /// number of valid bits
  @ffi.Int()
  external int code_bits;

  /// marker seen while filling entropy buffer
  @ffi.UnsignedChar()
  external int marker;

  /// flag if we saw a marker so must stop
  @ffi.Int()
  external int nomore;

  @ffi.Int()
  external int progressive;

  @ffi.Int()
  external int spec_start;

  @ffi.Int()
  external int spec_end;

  @ffi.Int()
  external int succ_high;

  @ffi.Int()
  external int succ_low;

  @ffi.Int()
  external int eob_run;

  @ffi.Int()
  external int jfif;

  /// Adobe APP14 tag
  @ffi.Int()
  external int app14_color_transform;

  @ffi.Int()
  external int rgb;

  @ffi.Int()
  external int scan_n;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> order;

  @ffi.Int()
  external int restart_interval;

  @ffi.Int()
  external int todo;

  /// kernels
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<stbi_uc> out, ffi.Int out_stride,
              ffi.Pointer<ffi.Short> data)>> idct_block_kernel;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<stbi_uc> out,
              ffi.Pointer<stbi_uc> y,
              ffi.Pointer<stbi_uc> pcb,
              ffi.Pointer<stbi_uc> pcr,
              ffi.Int count,
              ffi.Int step)>> YCbCr_to_RGB_kernel;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<stbi_uc> Function(
              ffi.Pointer<stbi_uc> out,
              ffi.Pointer<stbi_uc> in_near,
              ffi.Pointer<stbi_uc> in_far,
              ffi.Int w,
              ffi.Int hs)>> resample_row_hv_2_kernel;
}

final class stbi__pic_packet extends ffi.Struct {
  @stbi_uc()
  external int size;

  @stbi_uc()
  external int type;

  @stbi_uc()
  external int channel;
}

final class stbi__png extends ffi.Struct {
  external ffi.Pointer<stbi__context> s;

  external ffi.Pointer<stbi_uc> idata;

  external ffi.Pointer<stbi_uc> expanded;

  external ffi.Pointer<stbi_uc> out;

  @ffi.Int()
  external int depth;
}

final class stbi__pngchunk extends ffi.Struct {
  @stbi__uint32()
  external int length;

  @stbi__uint32()
  external int type;
}

final class stbi__resample extends ffi.Struct {
  external resample_row_func resample;

  external ffi.Pointer<stbi_uc> line0;

  external ffi.Pointer<stbi_uc> line1;

  /// expansion factor in each axis
  @ffi.Int()
  external int hs;

  @ffi.Int()
  external int vs;

  /// horizontal pixels pre-expansion
  @ffi.Int()
  external int w_lores;

  /// how far through vertical expansion we are
  @ffi.Int()
  external int ystep;

  /// which pre-expansion row we're on
  @ffi.Int()
  external int ypos;
}

final class stbi__result_info extends ffi.Struct {
  @ffi.Int()
  external int bits_per_channel;

  @ffi.Int()
  external int num_channels;

  @ffi.Int()
  external int channel_order;
}

typedef stbi__uint16 = ffi.Uint16;
typedef Dartstbi__uint16 = int;
typedef stbi__uint32 = ffi.Uint32;
typedef Dartstbi__uint32 = int;

/// zlib-from-memory implementation for PNG reading
/// because PNG allows splitting the zlib stream arbitrarily,
/// and it's annoying structurally to have PNG call ZLIB call PNG,
/// we require PNG read all the IDATs and combine them into a single
/// memory buffer
final class stbi__zbuf extends ffi.Struct {
  external ffi.Pointer<stbi_uc> zbuffer;

  external ffi.Pointer<stbi_uc> zbuffer_end;

  @ffi.Int()
  external int num_bits;

  @ffi.Int()
  external int hit_zeof_once;

  @stbi__uint32()
  external int code_buffer;

  external ffi.Pointer<ffi.Char> zout;

  external ffi.Pointer<ffi.Char> zout_start;

  external ffi.Pointer<ffi.Char> zout_end;

  @ffi.Int()
  external int z_expandable;

  external stbi__zhuffman z_length;

  external stbi__zhuffman z_distance;
}

/// zlib-style huffman encoding
/// (jpegs packs from left, zlib from right, so can't share code)
final class stbi__zhuffman extends ffi.Struct {
  @ffi.Array.multi([512])
  external ffi.Array<stbi__uint16> fast;

  @ffi.Array.multi([16])
  external ffi.Array<stbi__uint16> firstcode;

  @ffi.Array.multi([17])
  external ffi.Array<ffi.Int> maxcode;

  @ffi.Array.multi([16])
  external ffi.Array<stbi__uint16> firstsymbol;

  @ffi.Array.multi([288])
  external ffi.Array<stbi_uc> size;

  @ffi.Array.multi([288])
  external ffi.Array<stbi__uint16> value;
}

/// load image by filename, open file, or memory buffer
final class stbi_io_callbacks extends ffi.Struct {
  /// fill 'data' with 'size' bytes.  return number of bytes actually read
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void> user,
              ffi.Pointer<ffi.Char> data, ffi.Int size)>> read;

  /// skip the next 'n' bytes, or 'unget' the last -n bytes if negative
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void> user, ffi.Int n)>> skip;

  /// returns nonzero if we are at end of file/data
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> user)>>
      eof;
}

typedef stbi_uc = ffi.UnsignedChar;
typedef Dartstbi_uc = int;
typedef stbi_us = ffi.UnsignedShort;
typedef Dartstbi_us = int;

final class stbir__FP32 extends ffi.Union {
  @ffi.UnsignedInt()
  external int u;

  @ffi.Float()
  external double f;
}

typedef stbir__alpha_unweight_func = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Float> encode_buffer, ffi.Int width_times_channels)>;
typedef stbir__alpha_weight_func = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Float> decode_buffer, ffi.Int width_times_channels)>;

/// When gathering, the contributors are which source pixels contribute.
/// When scattering, the contributors are which destination pixels are contributed to.
final class stbir__contributors extends ffi.Struct {
  /// First contributing pixel
  @ffi.Int()
  external int n0;

  /// Last contributing pixel
  @ffi.Int()
  external int n1;
}

typedef stbir__decode_pixels_func = ffi.NativeFunction<
    ffi.Pointer<ffi.Float> Function(ffi.Pointer<ffi.Float> decode,
        ffi.Int width_times_channels, ffi.Pointer<ffi.Void> input)>;
typedef stbir__edge_wrap_func
    = ffi.NativeFunction<ffi.Int Function(ffi.Int n, ffi.Int max)>;
typedef stbir__encode_pixels_func = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Void> output,
        ffi.Int width_times_channels, ffi.Pointer<ffi.Float> encode)>;

final class stbir__extents extends ffi.Struct {
  external stbir__contributors conservative;

  /// this can be less than filter_pixel_margin, if the filter and scaling falls off
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> edge_sizes;

  /// can be two spans, if doing input subrect with clamp mode WRAP
  @ffi.Array.multi([2])
  external ffi.Array<stbir__span> spans;
}

final class stbir__filter_extent_info extends ffi.Struct {
  /// First sample index for whole filter
  @ffi.Int()
  external int lowest;

  /// Last sample index for whole filter
  @ffi.Int()
  external int highest;

  /// widest single set of samples for an output
  @ffi.Int()
  external int widest;
}

typedef stbir__handle_scanline_for_scatter_func = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<stbir__info> stbir_info,
        ffi.Pointer<stbir__per_split_info> split_info)>;
typedef stbir__horizontal_gather_channels_func = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Float> output_buffer,
        ffi.UnsignedInt output_sub_size,
        ffi.Pointer<ffi.Float> decode_buffer,
        ffi.Pointer<stbir__contributors> horizontal_contributors,
        ffi.Pointer<ffi.Float> horizontal_coefficients,
        ffi.Int coefficient_width)>;

final class stbir__info extends ffi.Struct {
  external stbir__sampler horizontal;

  external stbir__sampler vertical;

  external ffi.Pointer<ffi.Void> input_data;

  external ffi.Pointer<ffi.Void> output_data;

  @ffi.Int()
  external int input_stride_bytes;

  @ffi.Int()
  external int output_stride_bytes;

  /// The length of an individual entry in the ring buffer. The total number of ring buffers is stbir__get_filter_pixel_width(filter)
  @ffi.Int()
  external int ring_buffer_length_bytes;

  /// Total number of entries in the ring buffer.
  @ffi.Int()
  external int ring_buffer_num_entries;

  @ffi.UnsignedInt()
  external int input_typeAsInt;

  StbirDataType get input_type => StbirDataType.fromValue(input_typeAsInt);

  @ffi.UnsignedInt()
  external int output_typeAsInt;

  StbirDataType get output_type => StbirDataType.fromValue(output_typeAsInt);

  external ffi.Pointer<stbir_input_callback> in_pixels_cb;

  external ffi.Pointer<ffi.Void> user_data;

  external ffi.Pointer<stbir_output_callback> out_pixels_cb;

  external stbir__extents scanline_extents;

  external ffi.Pointer<ffi.Void> alloced_mem;

  /// by default 1, but there will be N of these allocated based on the thread init you did
  external ffi.Pointer<stbir__per_split_info> split_info;

  external ffi.Pointer<stbir__decode_pixels_func> decode_pixels;

  external ffi.Pointer<stbir__alpha_weight_func> alpha_weight;

  external ffi.Pointer<stbir__horizontal_gather_channels_func>
      horizontal_gather_channels;

  external ffi.Pointer<stbir__alpha_unweight_func> alpha_unweight;

  external ffi.Pointer<stbir__encode_pixels_func> encode_pixels;

  /// Number of entries in the ring buffer that will be allocated
  @ffi.Int()
  external int alloc_ring_buffer_num_entries;

  /// count of splits
  @ffi.Int()
  external int splits;

  @ffi.UnsignedInt()
  external int input_pixel_layout_internalAsInt;

  stbir_internal_pixel_layout get input_pixel_layout_internal =>
      stbir_internal_pixel_layout.fromValue(input_pixel_layout_internalAsInt);

  @ffi.UnsignedInt()
  external int output_pixel_layout_internalAsInt;

  stbir_internal_pixel_layout get output_pixel_layout_internal =>
      stbir_internal_pixel_layout.fromValue(output_pixel_layout_internalAsInt);

  @ffi.Int()
  external int input_color_and_type;

  /// offset within output_data
  @ffi.Int()
  external int offset_x;

  @ffi.Int()
  external int offset_y;

  @ffi.Int()
  external int vertical_first;

  @ffi.Int()
  external int channels;

  /// same as channels, except on RGBA/ARGB (7), or XA/AX (3)
  @ffi.Int()
  external int effective_channels;

  @ffi.Size()
  external int alloced_total;
}

/// callbacks for user installed filters
typedef stbir__kernel_callback = ffi.NativeFunction<
    ffi.Float Function(
        ffi.Float x, ffi.Float scale, ffi.Pointer<ffi.Void> user_data)>;

const double stbir__max_uint16_as_float = 65535.0;

const double stbir__max_uint16_as_float_inverted = 0.000015259021893143654;

const double stbir__max_uint8_as_float = 255.0;

const double stbir__max_uint8_as_float_inverted = 0.003921568859368563;

final class stbir__per_split_info extends ffi.Struct {
  external ffi.Pointer<ffi.Float> decode_buffer;

  @ffi.Int()
  external int ring_buffer_first_scanline;

  @ffi.Int()
  external int ring_buffer_last_scanline;

  /// first_scanline is at this index in the ring buffer
  @ffi.Int()
  external int ring_buffer_begin_index;

  @ffi.Int()
  external int start_output_y;

  @ffi.Int()
  external int end_output_y;

  /// used in scatter only
  @ffi.Int()
  external int start_input_y;

  @ffi.Int()
  external int end_input_y;

  /// one big buffer that we index into
  external ffi.Pointer<ffi.Float> ring_buffer;

  external ffi.Pointer<ffi.Float> vertical_buffer;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> no_cache_straddle;
}

final class stbir__sampler extends ffi.Struct {
  external ffi.Pointer<stbir__contributors> contributors;

  external ffi.Pointer<ffi.Float> coefficients;

  external ffi.Pointer<stbir__contributors> gather_prescatter_contributors;

  external ffi.Pointer<ffi.Float> gather_prescatter_coefficients;

  external stbir__scale_info scale_info;

  @ffi.Float()
  external double support;

  @ffi.UnsignedInt()
  external int filter_enumAsInt;

  StbirFilter get filter_enum => StbirFilter.fromValue(filter_enumAsInt);

  external ffi.Pointer<stbir__kernel_callback> filter_kernel;

  external ffi.Pointer<stbir__support_callback> filter_support;

  @ffi.UnsignedInt()
  external int edgeAsInt;

  StbirEdge get edge => StbirEdge.fromValue(edgeAsInt);

  @ffi.Int()
  external int coefficient_width;

  @ffi.Int()
  external int filter_pixel_width;

  @ffi.Int()
  external int filter_pixel_margin;

  @ffi.Int()
  external int num_contributors;

  @ffi.Int()
  external int contributors_size;

  @ffi.Int()
  external int coefficients_size;

  external stbir__filter_extent_info extent_info;

  /// 0 = scatter, 1 = gather with scale >= 1, 2 = gather with scale < 1
  @ffi.Int()
  external int is_gather;

  @ffi.Int()
  external int gather_prescatter_num_contributors;

  @ffi.Int()
  external int gather_prescatter_coefficient_width;

  @ffi.Int()
  external int gather_prescatter_contributors_size;

  @ffi.Int()
  external int gather_prescatter_coefficients_size;
}

final class stbir__scale_info extends ffi.Struct {
  @ffi.Int()
  external int input_full_size;

  @ffi.Int()
  external int output_sub_size;

  @ffi.Float()
  external double scale;

  @ffi.Float()
  external double inv_scale;

  /// starting shift in output pixel space (in pixels)
  @ffi.Float()
  external double pixel_shift;

  @ffi.Int()
  external int scale_is_rational;

  @stbir_uint32()
  external int scale_numerator;

  @stbir_uint32()
  external int scale_denominator;
}

const int stbir__simdfX_float_count = 4;

final class stbir__simdi_u32 extends ffi.Opaque {}

const double stbir__small_float = 7.52316384526264e-37;

final class stbir__span extends ffi.Struct {
  /// First pixel of decode buffer to write to
  @ffi.Int()
  external int n0;

  /// Last pixel of decode that will be written to
  @ffi.Int()
  external int n1;

  /// Pixel offset into input_scanline
  @ffi.Int()
  external int pixel_offset_for_input;
}

typedef stbir__support_callback = ffi.NativeFunction<
    ffi.Float Function(ffi.Float scale, ffi.Pointer<ffi.Void> user_data)>;

/// INPUT CALLBACK: this callback is used for input scanlines
typedef stbir_input_callback = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void> optional_output,
        ffi.Pointer<ffi.Void> input_ptr,
        ffi.Int num_pixels,
        ffi.Int x,
        ffi.Int y,
        ffi.Pointer<ffi.Void> context)>;

/// the internal pixel layout enums are in a different order, so we can easily do range comparisons of types
/// the public pixel layout is ordered in a way that if you cast num_channels (1-4) to the enum, you get something sensible
enum stbir_internal_pixel_layout {
  STBIRI_1CHANNEL(0),
  STBIRI_2CHANNEL(1),
  STBIRI_RGB(2),
  STBIRI_BGR(3),
  STBIRI_4CHANNEL(4),
  STBIRI_RGBA(5),
  STBIRI_BGRA(6),
  STBIRI_ARGB(7),
  STBIRI_ABGR(8),
  STBIRI_RA(9),
  STBIRI_AR(10),
  STBIRI_RGBA_PM(11),
  STBIRI_BGRA_PM(12),
  STBIRI_ARGB_PM(13),
  STBIRI_ABGR_PM(14),
  STBIRI_RA_PM(15),
  STBIRI_AR_PM(16);

  final int value;
  const stbir_internal_pixel_layout(this.value);

  static stbir_internal_pixel_layout fromValue(int value) => switch (value) {
        0 => STBIRI_1CHANNEL,
        1 => STBIRI_2CHANNEL,
        2 => STBIRI_RGB,
        3 => STBIRI_BGR,
        4 => STBIRI_4CHANNEL,
        5 => STBIRI_RGBA,
        6 => STBIRI_BGRA,
        7 => STBIRI_ARGB,
        8 => STBIRI_ABGR,
        9 => STBIRI_RA,
        10 => STBIRI_AR,
        11 => STBIRI_RGBA_PM,
        12 => STBIRI_BGRA_PM,
        13 => STBIRI_ARGB_PM,
        14 => STBIRI_ABGR_PM,
        15 => STBIRI_RA_PM,
        16 => STBIRI_AR_PM,
        _ => throw ArgumentError(
            'Unknown value for stbir_internal_pixel_layout: $value'),
      };
}

/// OUTPUT CALLBACK: this callback is used for output scanlines
typedef stbir_output_callback = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Void> output_ptr, ffi.Int num_pixels,
        ffi.Int y, ffi.Pointer<ffi.Void> context)>;
typedef stbir_uint16 = ffi.Uint16;
typedef Dartstbir_uint16 = int;
typedef stbir_uint32 = ffi.Uint32;
typedef Dartstbir_uint32 = int;
typedef stbir_uint64 = ffi.Uint64;
typedef Dartstbir_uint64 = int;
typedef stbir_uint8 = ffi.Uint8;
typedef Dartstbir_uint8 = int;
